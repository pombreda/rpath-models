#!/usr/bin/env python

#
# Generated  by generateDS.py.
#

import sys
from xml.dom import minidom
from xml.dom import Node

#
# User methods
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError, exp:

    class GeneratedsSuper(object):  # pyflakes=ignore
        def format_string(self, input_data, input_name=''):
            return input_data
        def format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def format_float(self, input_data, input_name=''):
            return '%f' % input_data
        def format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def format_boolean(self, input_data, input_name=''):
            return '%s' % input_data


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'utf-8'

#
# Support/utility functions.
#

def showIndent(outfile, level):
    for idx in range(level):
        outfile.write('    ')

def quote_xml(inStr):
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1

def quote_attrib(inStr):
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1

def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace):
        if self.category == MixedContainer.CategoryText:
            outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(outfile, level, namespace,name)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (self.name, self.value, self.name))
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write('model_.MixedContainer(%d, %d, "%s", "%s"),\n' % \
                (self.category, self.content_type, self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write('model_.MixedContainer(%d, %d, "%s", "%s"),\n' % \
                (self.category, self.content_type, self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write('model_.MixedContainer(%d, %d, "%s",\n' % \
                (self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0):
        self.name = name
        self.data_type = data_type
        self.container = container
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container

def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#

class inventory(GeneratedsSuper):
    member_data_items_ = [
        MemberSpec_('systems', 'systems_href', 0),
        MemberSpec_('log', 'log_href', 0),
        ]
    subclass = None
    superclass = None
    def __init__(self, systems=None, log=None):
        self.systems = systems
        self.log = log
    def factory(*args_, **kwargs_):
        if inventory.subclass:
            return inventory.subclass(*args_, **kwargs_)
        else:
            return inventory(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_systems(self): return self.systems
    def set_systems(self, systems): self.systems = systems
    def get_log(self): return self.log
    def set_log(self, log): self.log = log
    def export(self, outfile, level, namespace_='inv:', name_='inventory', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        self.exportAttributes(outfile, level, namespace_, name_='inventory')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, namespace_='inv:', name_='inventory'):
        pass
    def exportChildren(self, outfile, level, namespace_='inv:', name_='inventory'):
        if self.systems:
            self.systems.export(outfile, level, namespace_, name_='systems', )
        if self.log:
            self.log.export(outfile, level, namespace_, name_='log', )
    def hasContent_(self):
        if (
            self.systems is not None or
            self.log is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='inventory'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.systems is not None:
            showIndent(outfile, level)
            outfile.write('systems=model_.systems_href(\n')
            self.systems.exportLiteral(outfile, level, name_='systems')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.log is not None:
            showIndent(outfile, level)
            outfile.write('log=model_.log_href(\n')
            self.log.exportLiteral(outfile, level, name_='log')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'systems':
            obj_ = systems_href.factory()
            obj_.build(child_)
            self.set_systems(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'log':
            obj_ = log_href.factory()
            obj_.build(child_)
            self.set_log(obj_)
# end class inventory


class systems_href(GeneratedsSuper):
    member_data_items_ = [
        MemberSpec_('href', 'inv:string8092', 0),
        MemberSpec_('valueOf_', [], 0),
        ]
    subclass = None
    superclass = None
    def __init__(self, href=None, valueOf_=''):
        self.href = _cast(None, href)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if systems_href.subclass:
            return systems_href.subclass(*args_, **kwargs_)
        else:
            return systems_href(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_href(self): return self.href
    def set_href(self, href): self.href = href
    def getValueOf_(self): return self.valueOf_
    def setValueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def export(self, outfile, level, namespace_='inv:', name_='systems_href', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        self.exportAttributes(outfile, level, namespace_, name_='systems_href')
        if self.hasContent_():
            outfile.write('>')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, namespace_='inv:', name_='systems_href'):
        if self.href is not None:
            outfile.write(' href=%s' % (quote_attrib(self.href), ))
    def exportChildren(self, outfile, level, namespace_='inv:', name_='systems_href'):
        if self.valueOf_.find('![CDATA') > -1:
            value=quote_xml('%s' % self.valueOf_)
            value=value.replace('![CDATA','<![CDATA')
            value=value.replace(']]',']]>')
            outfile.write(value.encode(ExternalEncoding))
        else:
            outfile.write(quote_xml('%s' % self.valueOf_.encode(ExternalEncoding)))
    def hasContent_(self):
        if (
            self.valueOf_
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='systems_href'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        if self.href is not None:
            showIndent(outfile, level)
            outfile.write('href = %s,\n' % (self.href,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('valueOf_ = """%s""",\n' % (self.valueOf_,))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        self.valueOf_ = ''
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('href'):
            self.href = attrs.get('href').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.TEXT_NODE:
            self.valueOf_ += child_.nodeValue
        elif child_.nodeType == Node.CDATA_SECTION_NODE:
            self.valueOf_ += '![CDATA['+child_.nodeValue+']]'
# end class systems_href


class log_href(GeneratedsSuper):
    member_data_items_ = [
        MemberSpec_('href', 'inv:string8092', 0),
        MemberSpec_('valueOf_', [], 0),
        ]
    subclass = None
    superclass = None
    def __init__(self, href=None, valueOf_=''):
        self.href = _cast(None, href)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if log_href.subclass:
            return log_href.subclass(*args_, **kwargs_)
        else:
            return log_href(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_href(self): return self.href
    def set_href(self, href): self.href = href
    def getValueOf_(self): return self.valueOf_
    def setValueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def export(self, outfile, level, namespace_='inv:', name_='log_href', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        self.exportAttributes(outfile, level, namespace_, name_='log_href')
        if self.hasContent_():
            outfile.write('>')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, namespace_='inv:', name_='log_href'):
        if self.href is not None:
            outfile.write(' href=%s' % (quote_attrib(self.href), ))
    def exportChildren(self, outfile, level, namespace_='inv:', name_='log_href'):
        if self.valueOf_.find('![CDATA') > -1:
            value=quote_xml('%s' % self.valueOf_)
            value=value.replace('![CDATA','<![CDATA')
            value=value.replace(']]',']]>')
            outfile.write(value.encode(ExternalEncoding))
        else:
            outfile.write(quote_xml('%s' % self.valueOf_.encode(ExternalEncoding)))
    def hasContent_(self):
        if (
            self.valueOf_
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='log_href'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        if self.href is not None:
            showIndent(outfile, level)
            outfile.write('href = %s,\n' % (self.href,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('valueOf_ = """%s""",\n' % (self.valueOf_,))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        self.valueOf_ = ''
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('href'):
            self.href = attrs.get('href').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.TEXT_NODE:
            self.valueOf_ += child_.nodeValue
        elif child_.nodeType == Node.CDATA_SECTION_NODE:
            self.valueOf_ += '![CDATA['+child_.nodeValue+']]'
# end class log_href


class systems(GeneratedsSuper):
    member_data_items_ = [
        MemberSpec_('system', 'system', 1),
        ]
    subclass = None
    superclass = None
    def __init__(self, system=None):
        if system is None:
            self.system = []
        else:
            self.system = system
    def factory(*args_, **kwargs_):
        if systems.subclass:
            return systems.subclass(*args_, **kwargs_)
        else:
            return systems(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_system(self): return self.system
    def set_system(self, system): self.system = system
    def add_system(self, value): self.system.append(value)
    def insert_system(self, index, value): self.system[index] = value
    def export(self, outfile, level, namespace_='inv:', name_='systems', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        self.exportAttributes(outfile, level, namespace_, name_='systems')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, namespace_='inv:', name_='systems'):
        pass
    def exportChildren(self, outfile, level, namespace_='inv:', name_='systems'):
        for system_ in self.system:
            system_.export(outfile, level, namespace_, name_='system')
    def hasContent_(self):
        if (
            self.system
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='systems'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('system=[\n')
        level += 1
        for system_ in self.system:
            showIndent(outfile, level)
            outfile.write('model_.system(\n')
            system_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'system':
            obj_ = system.factory()
            obj_.build(child_)
            self.system.append(obj_)
# end class systems


class log(GeneratedsSuper):
    member_data_items_ = [
        MemberSpec_('valueOf_', [], 0),
        ]
    subclass = None
    superclass = None
    def __init__(self, valueOf_=''):
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if log.subclass:
            return log.subclass(*args_, **kwargs_)
        else:
            return log(*args_, **kwargs_)
    factory = staticmethod(factory)
    def getValueOf_(self): return self.valueOf_
    def setValueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def export(self, outfile, level, namespace_='inv:', name_='log', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        self.exportAttributes(outfile, level, namespace_, name_='log')
        if self.hasContent_():
            outfile.write('>')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, namespace_='inv:', name_='log'):
        pass
    def exportChildren(self, outfile, level, namespace_='inv:', name_='log'):
        if self.valueOf_.find('![CDATA') > -1:
            value=quote_xml('%s' % self.valueOf_)
            value=value.replace('![CDATA','<![CDATA')
            value=value.replace(']]',']]>')
            outfile.write(value.encode(ExternalEncoding))
        else:
            outfile.write(quote_xml('%s' % self.valueOf_.encode(ExternalEncoding)))
    def hasContent_(self):
        if (
            self.valueOf_
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='log'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('valueOf_ = """%s""",\n' % (self.valueOf_,))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        self.valueOf_ = ''
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.TEXT_NODE:
            self.valueOf_ += child_.nodeValue
        elif child_.nodeType == Node.CDATA_SECTION_NODE:
            self.valueOf_ += '![CDATA['+child_.nodeValue+']]'
# end class log


class system(GeneratedsSuper):
    member_data_items_ = [
        MemberSpec_('id', 'inv:string8092', 0),
        MemberSpec_('generated_uuid', ['string64', 'xsd:token'], 0),
        MemberSpec_('local_uuid', ['string64', 'xsd:token'], 0),
        MemberSpec_('activation_date', 'xsd:dateTime', 0),
        MemberSpec_('scheduled_event_start_date', 'xsd:dateTime', 0),
        MemberSpec_('launch_date', 'xsd:positiveInteger', 0),
        MemberSpec_('ssl_client_certificate', ['string8092', 'xsd:token'], 0),
        MemberSpec_('ssl_client_key', ['string8092', 'xsd:token'], 0),
        MemberSpec_('ssl_server_certificate', ['string8092', 'xsd:token'], 0),
        MemberSpec_('launching_user', ['string8092', 'xsd:token'], 0),
        MemberSpec_('target_type', ['string8092', 'xsd:token'], 0),
        MemberSpec_('target_name', ['string8092', 'xsd:token'], 0),
        MemberSpec_('target_system_id', ['string8092', 'xsd:token'], 0),
        MemberSpec_('available', 'xsd:boolean', 0),
        MemberSpec_('is_manageable', 'xsd:boolean', 0),
        MemberSpec_('log', 'log_href', 0),
        MemberSpec_('managed_status', ['managed_status', 'xsd:token'], 0),
        MemberSpec_('force_update_url', ['string8092', 'xsd:token'], 0),
        MemberSpec_('description', ['string8092', 'xsd:token'], 0),
        MemberSpec_('instance_id', ['string8092', 'xsd:token'], 0),
        MemberSpec_('name', ['string8092', 'xsd:token'], 0),
        MemberSpec_('out_of_date', 'xsd:boolean', 0),
        MemberSpec_('public_dns_name', ['string8092', 'xsd:token'], 0),
        MemberSpec_('reservation_id', ['string8092', 'xsd:token'], 0),
        MemberSpec_('state', ['current_state', 'xsd:token'], 0),
        MemberSpec_('activated', 'xsd:boolean', 0),
        MemberSpec_('target', 'target', 0),
        MemberSpec_('system_log', 'system_log_href', 0),
        MemberSpec_('agent_port', 'xsd:positiveInteger', 0),
        MemberSpec_('networks', 'networks', 0),
        ]
    subclass = None
    superclass = None
    def __init__(self, id=None, generated_uuid=None, local_uuid=None, activation_date=None, scheduled_event_start_date=None, launch_date=None, ssl_client_certificate=None, ssl_client_key=None, ssl_server_certificate=None, launching_user=None, target_type=None, target_name=None, target_system_id=None, available=None, is_manageable=None, log=None, managed_status=None, force_update_url=None, description=None, instance_id=None, name=None, out_of_date=None, public_dns_name=None, reservation_id=None, state=None, activated=None, target=None, system_log=None, agent_port=None, networks=None):
        self.id = _cast(None, id)
        self.generated_uuid = generated_uuid
        self.local_uuid = local_uuid
        self.activation_date = activation_date
        self.scheduled_event_start_date = scheduled_event_start_date
        self.launch_date = launch_date
        self.ssl_client_certificate = ssl_client_certificate
        self.ssl_client_key = ssl_client_key
        self.ssl_server_certificate = ssl_server_certificate
        self.launching_user = launching_user
        self.target_type = target_type
        self.target_name = target_name
        self.target_system_id = target_system_id
        self.available = available
        self.is_manageable = is_manageable
        self.log = log
        self.managed_status = managed_status
        self.force_update_url = force_update_url
        self.description = description
        self.instance_id = instance_id
        self.name = name
        self.out_of_date = out_of_date
        self.public_dns_name = public_dns_name
        self.reservation_id = reservation_id
        self.state = state
        self.activated = activated
        self.target = target
        self.system_log = system_log
        self.agent_port = agent_port
        self.networks = networks
    def factory(*args_, **kwargs_):
        if system.subclass:
            return system.subclass(*args_, **kwargs_)
        else:
            return system(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_generated_uuid(self): return self.generated_uuid
    def set_generated_uuid(self, generated_uuid): self.generated_uuid = generated_uuid
    def validate_generated_uuid(self, value):
        # validate type generated_uuid
        pass
    def get_local_uuid(self): return self.local_uuid
    def set_local_uuid(self, local_uuid): self.local_uuid = local_uuid
    def validate_local_uuid(self, value):
        # validate type local_uuid
        pass
    def get_activation_date(self): return self.activation_date
    def set_activation_date(self, activation_date): self.activation_date = activation_date
    def get_scheduled_event_start_date(self): return self.scheduled_event_start_date
    def set_scheduled_event_start_date(self, scheduled_event_start_date): self.scheduled_event_start_date = scheduled_event_start_date
    def get_launch_date(self): return self.launch_date
    def set_launch_date(self, launch_date): self.launch_date = launch_date
    def get_ssl_client_certificate(self): return self.ssl_client_certificate
    def set_ssl_client_certificate(self, ssl_client_certificate): self.ssl_client_certificate = ssl_client_certificate
    def validate_ssl_client_certificate(self, value):
        # validate type ssl_client_certificate
        pass
    def get_ssl_client_key(self): return self.ssl_client_key
    def set_ssl_client_key(self, ssl_client_key): self.ssl_client_key = ssl_client_key
    def validate_ssl_client_key(self, value):
        # validate type ssl_client_key
        pass
    def get_ssl_server_certificate(self): return self.ssl_server_certificate
    def set_ssl_server_certificate(self, ssl_server_certificate): self.ssl_server_certificate = ssl_server_certificate
    def validate_ssl_server_certificate(self, value):
        # validate type ssl_server_certificate
        pass
    def get_launching_user(self): return self.launching_user
    def set_launching_user(self, launching_user): self.launching_user = launching_user
    def validate_launching_user(self, value):
        # validate type launching_user
        pass
    def get_target_type(self): return self.target_type
    def set_target_type(self, target_type): self.target_type = target_type
    def validate_target_type(self, value):
        # validate type target_type
        pass
    def get_target_name(self): return self.target_name
    def set_target_name(self, target_name): self.target_name = target_name
    def validate_target_name(self, value):
        # validate type target_name
        pass
    def get_target_system_id(self): return self.target_system_id
    def set_target_system_id(self, target_system_id): self.target_system_id = target_system_id
    def validate_target_system_id(self, value):
        # validate type target_system_id
        pass
    def get_available(self): return self.available
    def set_available(self, available): self.available = available
    def get_is_manageable(self): return self.is_manageable
    def set_is_manageable(self, is_manageable): self.is_manageable = is_manageable
    def get_log(self): return self.log
    def set_log(self, log): self.log = log
    def get_managed_status(self): return self.managed_status
    def set_managed_status(self, managed_status): self.managed_status = managed_status
    def validate_managed_status(self, value):
        # Validate type managed_status, a restriction on xsd:token.
        pass
    def get_force_update_url(self): return self.force_update_url
    def set_force_update_url(self, force_update_url): self.force_update_url = force_update_url
    def validate_force_update_url(self, value):
        # validate type force_update_url
        pass
    def get_description(self): return self.description
    def set_description(self, description): self.description = description
    def validate_description(self, value):
        # validate type description
        pass
    def get_instance_id(self): return self.instance_id
    def set_instance_id(self, instance_id): self.instance_id = instance_id
    def validate_instance_id(self, value):
        # validate type instance_id
        pass
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def validate_name(self, value):
        # validate type name
        pass
    def get_out_of_date(self): return self.out_of_date
    def set_out_of_date(self, out_of_date): self.out_of_date = out_of_date
    def get_public_dns_name(self): return self.public_dns_name
    def set_public_dns_name(self, public_dns_name): self.public_dns_name = public_dns_name
    def validate_public_dns_name(self, value):
        # validate type public_dns_name
        pass
    def get_reservation_id(self): return self.reservation_id
    def set_reservation_id(self, reservation_id): self.reservation_id = reservation_id
    def validate_reservation_id(self, value):
        # validate type reservation_id
        pass
    def get_state(self): return self.state
    def set_state(self, state): self.state = state
    def validate_state(self, value):
        # validate type state
        pass
    def get_activated(self): return self.activated
    def set_activated(self, activated): self.activated = activated
    def get_target(self): return self.target
    def set_target(self, target): self.target = target
    def get_system_log(self): return self.system_log
    def set_system_log(self, system_log): self.system_log = system_log
    def get_agent_port(self): return self.agent_port
    def set_agent_port(self, agent_port): self.agent_port = agent_port
    def get_networks(self): return self.networks
    def set_networks(self, networks): self.networks = networks
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def export(self, outfile, level, namespace_='inv:', name_='system', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        self.exportAttributes(outfile, level, namespace_, name_='system')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, namespace_='inv:', name_='system'):
        if self.id is not None:
            outfile.write(' id=%s' % (quote_attrib(self.id), ))
    def exportChildren(self, outfile, level, namespace_='inv:', name_='system'):
        if self.generated_uuid is not None:
            showIndent(outfile, level)
            outfile.write('<%sgenerated_uuid>%s</%sgenerated_uuid>\n' % (namespace_, self.format_string(quote_xml(self.generated_uuid).encode(ExternalEncoding), input_name='generated_uuid'), namespace_))
        if self.local_uuid is not None:
            showIndent(outfile, level)
            outfile.write('<%slocal_uuid>%s</%slocal_uuid>\n' % (namespace_, self.format_string(quote_xml(self.local_uuid).encode(ExternalEncoding), input_name='local_uuid'), namespace_))
        if self.activation_date is not None:
            showIndent(outfile, level)
            outfile.write('<%sactivation_date>%s</%sactivation_date>\n' % (namespace_, self.format_string(quote_xml(self.activation_date).encode(ExternalEncoding), input_name='activation_date'), namespace_))
        if self.scheduled_event_start_date is not None:
            showIndent(outfile, level)
            outfile.write('<%sscheduled_event_start_date>%s</%sscheduled_event_start_date>\n' % (namespace_, self.format_string(quote_xml(self.scheduled_event_start_date).encode(ExternalEncoding), input_name='scheduled_event_start_date'), namespace_))
        if self.launch_date is not None:
            showIndent(outfile, level)
            outfile.write('<%slaunch_date>%s</%slaunch_date>\n' % (namespace_, self.format_integer(self.launch_date, input_name='launch_date'), namespace_))
        if self.ssl_client_certificate is not None:
            showIndent(outfile, level)
            outfile.write('<%sssl_client_certificate>%s</%sssl_client_certificate>\n' % (namespace_, self.format_string(quote_xml(self.ssl_client_certificate).encode(ExternalEncoding), input_name='ssl_client_certificate'), namespace_))
        if self.ssl_client_key is not None:
            showIndent(outfile, level)
            outfile.write('<%sssl_client_key>%s</%sssl_client_key>\n' % (namespace_, self.format_string(quote_xml(self.ssl_client_key).encode(ExternalEncoding), input_name='ssl_client_key'), namespace_))
        if self.ssl_server_certificate is not None:
            showIndent(outfile, level)
            outfile.write('<%sssl_server_certificate>%s</%sssl_server_certificate>\n' % (namespace_, self.format_string(quote_xml(self.ssl_server_certificate).encode(ExternalEncoding), input_name='ssl_server_certificate'), namespace_))
        if self.launching_user is not None:
            showIndent(outfile, level)
            outfile.write('<%slaunching_user>%s</%slaunching_user>\n' % (namespace_, self.format_string(quote_xml(self.launching_user).encode(ExternalEncoding), input_name='launching_user'), namespace_))
        if self.target_type is not None:
            showIndent(outfile, level)
            outfile.write('<%starget_type>%s</%starget_type>\n' % (namespace_, self.format_string(quote_xml(self.target_type).encode(ExternalEncoding), input_name='target_type'), namespace_))
        if self.target_name is not None:
            showIndent(outfile, level)
            outfile.write('<%starget_name>%s</%starget_name>\n' % (namespace_, self.format_string(quote_xml(self.target_name).encode(ExternalEncoding), input_name='target_name'), namespace_))
        if self.target_system_id is not None:
            showIndent(outfile, level)
            outfile.write('<%starget_system_id>%s</%starget_system_id>\n' % (namespace_, self.format_string(quote_xml(self.target_system_id).encode(ExternalEncoding), input_name='target_system_id'), namespace_))
        if self.available is not None:
            showIndent(outfile, level)
            outfile.write('<%savailable>%s</%savailable>\n' % (namespace_, self.format_boolean(str_lower(str(self.available)), input_name='available'), namespace_))
        if self.is_manageable is not None:
            showIndent(outfile, level)
            outfile.write('<%sis_manageable>%s</%sis_manageable>\n' % (namespace_, self.format_boolean(str_lower(str(self.is_manageable)), input_name='is_manageable'), namespace_))
        if self.log:
            self.log.export(outfile, level, namespace_, name_='log')
        if self.managed_status is not None:
            showIndent(outfile, level)
            outfile.write('<%smanaged_status>%s</%smanaged_status>\n' % (namespace_, self.format_string(quote_xml(self.managed_status).encode(ExternalEncoding), input_name='managed_status'), namespace_))
        if self.force_update_url is not None:
            showIndent(outfile, level)
            outfile.write('<%sforce_update_url>%s</%sforce_update_url>\n' % (namespace_, self.format_string(quote_xml(self.force_update_url).encode(ExternalEncoding), input_name='force_update_url'), namespace_))
        if self.description is not None:
            showIndent(outfile, level)
            outfile.write('<%sdescription>%s</%sdescription>\n' % (namespace_, self.format_string(quote_xml(self.description).encode(ExternalEncoding), input_name='description'), namespace_))
        if self.instance_id is not None:
            showIndent(outfile, level)
            outfile.write('<%sinstance_id>%s</%sinstance_id>\n' % (namespace_, self.format_string(quote_xml(self.instance_id).encode(ExternalEncoding), input_name='instance_id'), namespace_))
        if self.name is not None:
            showIndent(outfile, level)
            outfile.write('<%sname>%s</%sname>\n' % (namespace_, self.format_string(quote_xml(self.name).encode(ExternalEncoding), input_name='name'), namespace_))
        if self.out_of_date is not None:
            showIndent(outfile, level)
            outfile.write('<%sout_of_date>%s</%sout_of_date>\n' % (namespace_, self.format_boolean(str_lower(str(self.out_of_date)), input_name='out_of_date'), namespace_))
        if self.public_dns_name is not None:
            showIndent(outfile, level)
            outfile.write('<%spublic_dns_name>%s</%spublic_dns_name>\n' % (namespace_, self.format_string(quote_xml(self.public_dns_name).encode(ExternalEncoding), input_name='public_dns_name'), namespace_))
        if self.reservation_id is not None:
            showIndent(outfile, level)
            outfile.write('<%sreservation_id>%s</%sreservation_id>\n' % (namespace_, self.format_string(quote_xml(self.reservation_id).encode(ExternalEncoding), input_name='reservation_id'), namespace_))
        if self.state is not None:
            showIndent(outfile, level)
            outfile.write('<%sstate>%s</%sstate>\n' % (namespace_, self.format_string(quote_xml(self.state).encode(ExternalEncoding), input_name='state'), namespace_))
        if self.activated is not None:
            showIndent(outfile, level)
            outfile.write('<%sactivated>%s</%sactivated>\n' % (namespace_, self.format_boolean(str_lower(str(self.activated)), input_name='activated'), namespace_))
        if self.target:
            self.target.export(outfile, level, namespace_, name_='target')
        if self.system_log:
            self.system_log.export(outfile, level, namespace_, name_='system_log')
        if self.agent_port is not None:
            showIndent(outfile, level)
            outfile.write('<%sagent_port>%s</%sagent_port>\n' % (namespace_, self.format_integer(self.agent_port, input_name='agent_port'), namespace_))
        if self.networks:
            self.networks.export(outfile, level, namespace_, name_='networks', )
    def hasContent_(self):
        if (
            self.generated_uuid is not None or
            self.local_uuid is not None or
            self.activation_date is not None or
            self.scheduled_event_start_date is not None or
            self.launch_date is not None or
            self.ssl_client_certificate is not None or
            self.ssl_client_key is not None or
            self.ssl_server_certificate is not None or
            self.launching_user is not None or
            self.target_type is not None or
            self.target_name is not None or
            self.target_system_id is not None or
            self.available is not None or
            self.is_manageable is not None or
            self.log is not None or
            self.managed_status is not None or
            self.force_update_url is not None or
            self.description is not None or
            self.instance_id is not None or
            self.name is not None or
            self.out_of_date is not None or
            self.public_dns_name is not None or
            self.reservation_id is not None or
            self.state is not None or
            self.activated is not None or
            self.target is not None or
            self.system_log is not None or
            self.agent_port is not None or
            self.networks is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='system'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        if self.id is not None:
            showIndent(outfile, level)
            outfile.write('id = %s,\n' % (self.id,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.generated_uuid is not None:
            showIndent(outfile, level)
            outfile.write('generated_uuid=%s,\n' % quote_python(self.generated_uuid).encode(ExternalEncoding))
        if self.local_uuid is not None:
            showIndent(outfile, level)
            outfile.write('local_uuid=%s,\n' % quote_python(self.local_uuid).encode(ExternalEncoding))
        if self.activation_date is not None:
            showIndent(outfile, level)
            outfile.write('activation_date=%s,\n' % quote_python(self.activation_date).encode(ExternalEncoding))
        if self.scheduled_event_start_date is not None:
            showIndent(outfile, level)
            outfile.write('scheduled_event_start_date=%s,\n' % quote_python(self.scheduled_event_start_date).encode(ExternalEncoding))
        if self.launch_date is not None:
            showIndent(outfile, level)
            outfile.write('launch_date=%d,\n' % self.launch_date)
        if self.ssl_client_certificate is not None:
            showIndent(outfile, level)
            outfile.write('ssl_client_certificate=%s,\n' % quote_python(self.ssl_client_certificate).encode(ExternalEncoding))
        if self.ssl_client_key is not None:
            showIndent(outfile, level)
            outfile.write('ssl_client_key=%s,\n' % quote_python(self.ssl_client_key).encode(ExternalEncoding))
        if self.ssl_server_certificate is not None:
            showIndent(outfile, level)
            outfile.write('ssl_server_certificate=%s,\n' % quote_python(self.ssl_server_certificate).encode(ExternalEncoding))
        if self.launching_user is not None:
            showIndent(outfile, level)
            outfile.write('launching_user=%s,\n' % quote_python(self.launching_user).encode(ExternalEncoding))
        if self.target_type is not None:
            showIndent(outfile, level)
            outfile.write('target_type=%s,\n' % quote_python(self.target_type).encode(ExternalEncoding))
        if self.target_name is not None:
            showIndent(outfile, level)
            outfile.write('target_name=%s,\n' % quote_python(self.target_name).encode(ExternalEncoding))
        if self.target_system_id is not None:
            showIndent(outfile, level)
            outfile.write('target_system_id=%s,\n' % quote_python(self.target_system_id).encode(ExternalEncoding))
        if self.available is not None:
            showIndent(outfile, level)
            outfile.write('available=%s,\n' % self.available)
        if self.is_manageable is not None:
            showIndent(outfile, level)
            outfile.write('is_manageable=%s,\n' % self.is_manageable)
        if self.log is not None:
            showIndent(outfile, level)
            outfile.write('log=model_.log_href(\n')
            self.log.exportLiteral(outfile, level, name_='log')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.managed_status is not None:
            showIndent(outfile, level)
            outfile.write('managed_status=%s,\n' % quote_python(self.managed_status).encode(ExternalEncoding))
        if self.force_update_url is not None:
            showIndent(outfile, level)
            outfile.write('force_update_url=%s,\n' % quote_python(self.force_update_url).encode(ExternalEncoding))
        if self.description is not None:
            showIndent(outfile, level)
            outfile.write('description=%s,\n' % quote_python(self.description).encode(ExternalEncoding))
        if self.instance_id is not None:
            showIndent(outfile, level)
            outfile.write('instance_id=%s,\n' % quote_python(self.instance_id).encode(ExternalEncoding))
        if self.name is not None:
            showIndent(outfile, level)
            outfile.write('name=%s,\n' % quote_python(self.name).encode(ExternalEncoding))
        if self.out_of_date is not None:
            showIndent(outfile, level)
            outfile.write('out_of_date=%s,\n' % self.out_of_date)
        if self.public_dns_name is not None:
            showIndent(outfile, level)
            outfile.write('public_dns_name=%s,\n' % quote_python(self.public_dns_name).encode(ExternalEncoding))
        if self.reservation_id is not None:
            showIndent(outfile, level)
            outfile.write('reservation_id=%s,\n' % quote_python(self.reservation_id).encode(ExternalEncoding))
        if self.state is not None:
            showIndent(outfile, level)
            outfile.write('state=%s,\n' % quote_python(self.state).encode(ExternalEncoding))
        if self.activated is not None:
            showIndent(outfile, level)
            outfile.write('activated=%s,\n' % self.activated)
        if self.target is not None:
            showIndent(outfile, level)
            outfile.write('target=model_.target(\n')
            self.target.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.system_log is not None:
            showIndent(outfile, level)
            outfile.write('system_log=model_.system_log_href(\n')
            self.system_log.exportLiteral(outfile, level, name_='system_log')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.agent_port is not None:
            showIndent(outfile, level)
            outfile.write('agent_port=%d,\n' % self.agent_port)
        if self.networks is not None:
            showIndent(outfile, level)
            outfile.write('networks=model_.networks(\n')
            self.networks.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('id'):
            self.id = attrs.get('id').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'generated_uuid':
            generated_uuid_ = ''
            for text__content_ in child_.childNodes:
                generated_uuid_ += text__content_.nodeValue
            self.generated_uuid = generated_uuid_
            self.validate_generated_uuid(self.generated_uuid)    # validate type generated_uuid
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'local_uuid':
            local_uuid_ = ''
            for text__content_ in child_.childNodes:
                local_uuid_ += text__content_.nodeValue
            self.local_uuid = local_uuid_
            self.validate_local_uuid(self.local_uuid)    # validate type local_uuid
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'activation_date':
            activation_date_ = ''
            for text__content_ in child_.childNodes:
                activation_date_ += text__content_.nodeValue
            self.activation_date = activation_date_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'scheduled_event_start_date':
            scheduled_event_start_date_ = ''
            for text__content_ in child_.childNodes:
                scheduled_event_start_date_ += text__content_.nodeValue
            self.scheduled_event_start_date = scheduled_event_start_date_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'launch_date':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    ival_ = int(sval_)
                except ValueError, exp:
                    raise ValueError('requires integer (launch_date): %s' % exp)
                if ival_ <= 0:
                    raise ValueError('requires positiveInteger -- %s' % child_.toxml())
                self.launch_date = ival_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'ssl_client_certificate':
            ssl_client_certificate_ = ''
            for text__content_ in child_.childNodes:
                ssl_client_certificate_ += text__content_.nodeValue
            self.ssl_client_certificate = ssl_client_certificate_
            self.validate_ssl_client_certificate(self.ssl_client_certificate)    # validate type ssl_client_certificate
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'ssl_client_key':
            ssl_client_key_ = ''
            for text__content_ in child_.childNodes:
                ssl_client_key_ += text__content_.nodeValue
            self.ssl_client_key = ssl_client_key_
            self.validate_ssl_client_key(self.ssl_client_key)    # validate type ssl_client_key
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'ssl_server_certificate':
            ssl_server_certificate_ = ''
            for text__content_ in child_.childNodes:
                ssl_server_certificate_ += text__content_.nodeValue
            self.ssl_server_certificate = ssl_server_certificate_
            self.validate_ssl_server_certificate(self.ssl_server_certificate)    # validate type ssl_server_certificate
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'launching_user':
            launching_user_ = ''
            for text__content_ in child_.childNodes:
                launching_user_ += text__content_.nodeValue
            self.launching_user = launching_user_
            self.validate_launching_user(self.launching_user)    # validate type launching_user
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'target_type':
            target_type_ = ''
            for text__content_ in child_.childNodes:
                target_type_ += text__content_.nodeValue
            self.target_type = target_type_
            self.validate_target_type(self.target_type)    # validate type target_type
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'target_name':
            target_name_ = ''
            for text__content_ in child_.childNodes:
                target_name_ += text__content_.nodeValue
            self.target_name = target_name_
            self.validate_target_name(self.target_name)    # validate type target_name
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'target_system_id':
            target_system_id_ = ''
            for text__content_ in child_.childNodes:
                target_system_id_ += text__content_.nodeValue
            self.target_system_id = target_system_id_
            self.validate_target_system_id(self.target_system_id)    # validate type target_system_id
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'available':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                if sval_ in ('true', '1'):
                    ival_ = True
                elif sval_ in ('false', '0'):
                    ival_ = False
                else:
                    raise ValueError('requires boolean -- %s' % child_.toxml())
                self.available = ival_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'is_manageable':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                if sval_ in ('true', '1'):
                    ival_ = True
                elif sval_ in ('false', '0'):
                    ival_ = False
                else:
                    raise ValueError('requires boolean -- %s' % child_.toxml())
                self.is_manageable = ival_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'log':
            obj_ = log_href.factory()
            obj_.build(child_)
            self.set_log(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'managed_status':
            managed_status_ = ''
            for text__content_ in child_.childNodes:
                managed_status_ += text__content_.nodeValue
            self.managed_status = managed_status_
            self.validate_managed_status(self.managed_status)    # validate type managed_status
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'force_update_url':
            force_update_url_ = ''
            for text__content_ in child_.childNodes:
                force_update_url_ += text__content_.nodeValue
            self.force_update_url = force_update_url_
            self.validate_force_update_url(self.force_update_url)    # validate type force_update_url
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'description':
            description_ = ''
            for text__content_ in child_.childNodes:
                description_ += text__content_.nodeValue
            self.description = description_
            self.validate_description(self.description)    # validate type description
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'instance_id':
            instance_id_ = ''
            for text__content_ in child_.childNodes:
                instance_id_ += text__content_.nodeValue
            self.instance_id = instance_id_
            self.validate_instance_id(self.instance_id)    # validate type instance_id
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'name':
            name_ = ''
            for text__content_ in child_.childNodes:
                name_ += text__content_.nodeValue
            self.name = name_
            self.validate_name(self.name)    # validate type name
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'out_of_date':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                if sval_ in ('true', '1'):
                    ival_ = True
                elif sval_ in ('false', '0'):
                    ival_ = False
                else:
                    raise ValueError('requires boolean -- %s' % child_.toxml())
                self.out_of_date = ival_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'public_dns_name':
            public_dns_name_ = ''
            for text__content_ in child_.childNodes:
                public_dns_name_ += text__content_.nodeValue
            self.public_dns_name = public_dns_name_
            self.validate_public_dns_name(self.public_dns_name)    # validate type public_dns_name
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'reservation_id':
            reservation_id_ = ''
            for text__content_ in child_.childNodes:
                reservation_id_ += text__content_.nodeValue
            self.reservation_id = reservation_id_
            self.validate_reservation_id(self.reservation_id)    # validate type reservation_id
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'state':
            state_ = ''
            for text__content_ in child_.childNodes:
                state_ += text__content_.nodeValue
            self.state = state_
            self.validate_state(self.state)    # validate type state
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'activated':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                if sval_ in ('true', '1'):
                    ival_ = True
                elif sval_ in ('false', '0'):
                    ival_ = False
                else:
                    raise ValueError('requires boolean -- %s' % child_.toxml())
                self.activated = ival_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'target':
            obj_ = target.factory()
            obj_.build(child_)
            self.set_target(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'system_log':
            obj_ = system_log_href.factory()
            obj_.build(child_)
            self.set_system_log(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'agent_port':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    ival_ = int(sval_)
                except ValueError, exp:
                    raise ValueError('requires integer (agent_port): %s' % exp)
                if ival_ <= 0:
                    raise ValueError('requires positiveInteger -- %s' % child_.toxml())
                self.agent_port = ival_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'networks':
            obj_ = networks.factory()
            obj_.build(child_)
            self.set_networks(obj_)
# end class system


class networks(GeneratedsSuper):
    member_data_items_ = [
        MemberSpec_('network', 'network', 1),
        ]
    subclass = None
    superclass = None
    def __init__(self, network=None):
        if network is None:
            self.network = []
        else:
            self.network = network
    def factory(*args_, **kwargs_):
        if networks.subclass:
            return networks.subclass(*args_, **kwargs_)
        else:
            return networks(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_network(self): return self.network
    def set_network(self, network): self.network = network
    def add_network(self, value): self.network.append(value)
    def insert_network(self, index, value): self.network[index] = value
    def export(self, outfile, level, namespace_='inv:', name_='networks', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        self.exportAttributes(outfile, level, namespace_, name_='networks')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, namespace_='inv:', name_='networks'):
        pass
    def exportChildren(self, outfile, level, namespace_='inv:', name_='networks'):
        for network_ in self.network:
            network_.export(outfile, level, namespace_, name_='network')
    def hasContent_(self):
        if (
            self.network
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='networks'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('network=[\n')
        level += 1
        for network_ in self.network:
            showIndent(outfile, level)
            outfile.write('model_.network(\n')
            network_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'network':
            obj_ = network.factory()
            obj_.build(child_)
            self.network.append(obj_)
# end class networks


class network(GeneratedsSuper):
    member_data_items_ = [
        MemberSpec_('ip_address', ['string15', 'xsd:token'], 0),
        MemberSpec_('ipv6_address', ['string255', 'xsd:token'], 0),
        MemberSpec_('public_dns_name', ['string255', 'xsd:token'], 0),
        MemberSpec_('device_name', ['string8092', 'xsd:token'], 0),
        MemberSpec_('netmask', ['string8092', 'xsd:token'], 0),
        MemberSpec_('port_type', ['string8092', 'xsd:token'], 0),
        MemberSpec_('primary', 'xsd:boolean', 0),
        ]
    subclass = None
    superclass = None
    def __init__(self, ip_address=None, ipv6_address=None, public_dns_name=None, device_name=None, netmask=None, port_type=None, primary=None):
        self.ip_address = ip_address
        self.ipv6_address = ipv6_address
        self.public_dns_name = public_dns_name
        self.device_name = device_name
        self.netmask = netmask
        self.port_type = port_type
        self.primary = primary
    def factory(*args_, **kwargs_):
        if network.subclass:
            return network.subclass(*args_, **kwargs_)
        else:
            return network(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ip_address(self): return self.ip_address
    def set_ip_address(self, ip_address): self.ip_address = ip_address
    def validate_ip_address(self, value):
        # validate type ip_address
        pass
    def get_ipv6_address(self): return self.ipv6_address
    def set_ipv6_address(self, ipv6_address): self.ipv6_address = ipv6_address
    def validate_ipv6_address(self, value):
        # validate type ipv6_address
        pass
    def get_public_dns_name(self): return self.public_dns_name
    def set_public_dns_name(self, public_dns_name): self.public_dns_name = public_dns_name
    def validate_public_dns_name(self, value):
        # validate type public_dns_name
        pass
    def get_device_name(self): return self.device_name
    def set_device_name(self, device_name): self.device_name = device_name
    def validate_device_name(self, value):
        # validate type device_name
        pass
    def get_netmask(self): return self.netmask
    def set_netmask(self, netmask): self.netmask = netmask
    def validate_netmask(self, value):
        # validate type netmask
        pass
    def get_port_type(self): return self.port_type
    def set_port_type(self, port_type): self.port_type = port_type
    def validate_port_type(self, value):
        # validate type port_type
        pass
    def get_primary(self): return self.primary
    def set_primary(self, primary): self.primary = primary
    def export(self, outfile, level, namespace_='inv:', name_='network', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        self.exportAttributes(outfile, level, namespace_, name_='network')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, namespace_='inv:', name_='network'):
        pass
    def exportChildren(self, outfile, level, namespace_='inv:', name_='network'):
        if self.ip_address is not None:
            showIndent(outfile, level)
            outfile.write('<%sip_address>%s</%sip_address>\n' % (namespace_, self.format_string(quote_xml(self.ip_address).encode(ExternalEncoding), input_name='ip_address'), namespace_))
        if self.ipv6_address is not None:
            showIndent(outfile, level)
            outfile.write('<%sipv6_address>%s</%sipv6_address>\n' % (namespace_, self.format_string(quote_xml(self.ipv6_address).encode(ExternalEncoding), input_name='ipv6_address'), namespace_))
        if self.public_dns_name is not None:
            showIndent(outfile, level)
            outfile.write('<%spublic_dns_name>%s</%spublic_dns_name>\n' % (namespace_, self.format_string(quote_xml(self.public_dns_name).encode(ExternalEncoding), input_name='public_dns_name'), namespace_))
        if self.device_name is not None:
            showIndent(outfile, level)
            outfile.write('<%sdevice_name>%s</%sdevice_name>\n' % (namespace_, self.format_string(quote_xml(self.device_name).encode(ExternalEncoding), input_name='device_name'), namespace_))
        if self.netmask is not None:
            showIndent(outfile, level)
            outfile.write('<%snetmask>%s</%snetmask>\n' % (namespace_, self.format_string(quote_xml(self.netmask).encode(ExternalEncoding), input_name='netmask'), namespace_))
        if self.port_type is not None:
            showIndent(outfile, level)
            outfile.write('<%sport_type>%s</%sport_type>\n' % (namespace_, self.format_string(quote_xml(self.port_type).encode(ExternalEncoding), input_name='port_type'), namespace_))
        if self.primary is not None:
            showIndent(outfile, level)
            outfile.write('<%sprimary>%s</%sprimary>\n' % (namespace_, self.format_boolean(str_lower(str(self.primary)), input_name='primary'), namespace_))
    def hasContent_(self):
        if (
            self.ip_address is not None or
            self.ipv6_address is not None or
            self.public_dns_name is not None or
            self.device_name is not None or
            self.netmask is not None or
            self.port_type is not None or
            self.primary is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='network'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.ip_address is not None:
            showIndent(outfile, level)
            outfile.write('ip_address=%s,\n' % quote_python(self.ip_address).encode(ExternalEncoding))
        if self.ipv6_address is not None:
            showIndent(outfile, level)
            outfile.write('ipv6_address=%s,\n' % quote_python(self.ipv6_address).encode(ExternalEncoding))
        if self.public_dns_name is not None:
            showIndent(outfile, level)
            outfile.write('public_dns_name=%s,\n' % quote_python(self.public_dns_name).encode(ExternalEncoding))
        if self.device_name is not None:
            showIndent(outfile, level)
            outfile.write('device_name=%s,\n' % quote_python(self.device_name).encode(ExternalEncoding))
        if self.netmask is not None:
            showIndent(outfile, level)
            outfile.write('netmask=%s,\n' % quote_python(self.netmask).encode(ExternalEncoding))
        if self.port_type is not None:
            showIndent(outfile, level)
            outfile.write('port_type=%s,\n' % quote_python(self.port_type).encode(ExternalEncoding))
        if self.primary is not None:
            showIndent(outfile, level)
            outfile.write('primary=%s,\n' % self.primary)
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'ip_address':
            ip_address_ = ''
            for text__content_ in child_.childNodes:
                ip_address_ += text__content_.nodeValue
            self.ip_address = ip_address_
            self.validate_ip_address(self.ip_address)    # validate type ip_address
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'ipv6_address':
            ipv6_address_ = ''
            for text__content_ in child_.childNodes:
                ipv6_address_ += text__content_.nodeValue
            self.ipv6_address = ipv6_address_
            self.validate_ipv6_address(self.ipv6_address)    # validate type ipv6_address
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'public_dns_name':
            public_dns_name_ = ''
            for text__content_ in child_.childNodes:
                public_dns_name_ += text__content_.nodeValue
            self.public_dns_name = public_dns_name_
            self.validate_public_dns_name(self.public_dns_name)    # validate type public_dns_name
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'device_name':
            device_name_ = ''
            for text__content_ in child_.childNodes:
                device_name_ += text__content_.nodeValue
            self.device_name = device_name_
            self.validate_device_name(self.device_name)    # validate type device_name
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'netmask':
            netmask_ = ''
            for text__content_ in child_.childNodes:
                netmask_ += text__content_.nodeValue
            self.netmask = netmask_
            self.validate_netmask(self.netmask)    # validate type netmask
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'port_type':
            port_type_ = ''
            for text__content_ in child_.childNodes:
                port_type_ += text__content_.nodeValue
            self.port_type = port_type_
            self.validate_port_type(self.port_type)    # validate type port_type
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'primary':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                if sval_ in ('true', '1'):
                    ival_ = True
                elif sval_ in ('false', '0'):
                    ival_ = False
                else:
                    raise ValueError('requires boolean -- %s' % child_.toxml())
                self.primary = ival_
# end class network


class system_log_href(GeneratedsSuper):
    member_data_items_ = [
        MemberSpec_('href', 'inv:string8092', 0),
        MemberSpec_('valueOf_', [], 0),
        ]
    subclass = None
    superclass = None
    def __init__(self, href=None, valueOf_=''):
        self.href = _cast(None, href)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if system_log_href.subclass:
            return system_log_href.subclass(*args_, **kwargs_)
        else:
            return system_log_href(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_href(self): return self.href
    def set_href(self, href): self.href = href
    def getValueOf_(self): return self.valueOf_
    def setValueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def export(self, outfile, level, namespace_='inv:', name_='system_log_href', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        self.exportAttributes(outfile, level, namespace_, name_='system_log_href')
        if self.hasContent_():
            outfile.write('>')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, namespace_='inv:', name_='system_log_href'):
        if self.href is not None:
            outfile.write(' href=%s' % (quote_attrib(self.href), ))
    def exportChildren(self, outfile, level, namespace_='inv:', name_='system_log_href'):
        if self.valueOf_.find('![CDATA') > -1:
            value=quote_xml('%s' % self.valueOf_)
            value=value.replace('![CDATA','<![CDATA')
            value=value.replace(']]',']]>')
            outfile.write(value.encode(ExternalEncoding))
        else:
            outfile.write(quote_xml('%s' % self.valueOf_.encode(ExternalEncoding)))
    def hasContent_(self):
        if (
            self.valueOf_
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='system_log_href'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        if self.href is not None:
            showIndent(outfile, level)
            outfile.write('href = %s,\n' % (self.href,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('valueOf_ = """%s""",\n' % (self.valueOf_,))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        self.valueOf_ = ''
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('href'):
            self.href = attrs.get('href').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.TEXT_NODE:
            self.valueOf_ += child_.nodeValue
        elif child_.nodeType == Node.CDATA_SECTION_NODE:
            self.valueOf_ += '![CDATA['+child_.nodeValue+']]'
# end class system_log_href


class target(GeneratedsSuper):
    member_data_items_ = [
        MemberSpec_('id', 'inv:string8092', 0),
        MemberSpec_('cloudAlias', ['string8092', 'xsd:token'], 0),
        MemberSpec_('cloudName', ['string8092', 'xsd:token'], 0),
        MemberSpec_('type_', 'type', 0),
        ]
    subclass = None
    superclass = None
    def __init__(self, id=None, cloudAlias=None, cloudName=None, type_=None):
        self.id = _cast(None, id)
        self.cloudAlias = cloudAlias
        self.cloudName = cloudName
        self.type_ = type_
    def factory(*args_, **kwargs_):
        if target.subclass:
            return target.subclass(*args_, **kwargs_)
        else:
            return target(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_cloudAlias(self): return self.cloudAlias
    def set_cloudAlias(self, cloudAlias): self.cloudAlias = cloudAlias
    def validate_cloudAlias(self, value):
        # validate type cloudAlias
        pass
    def get_cloudName(self): return self.cloudName
    def set_cloudName(self, cloudName): self.cloudName = cloudName
    def validate_cloudName(self, value):
        # validate type cloudName
        pass
    def get_type(self): return self.type_
    def set_type(self, type_): self.type_ = type_
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def export(self, outfile, level, namespace_='inv:', name_='target', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        self.exportAttributes(outfile, level, namespace_, name_='target')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, namespace_='inv:', name_='target'):
        if self.id is not None:
            outfile.write(' id=%s' % (quote_attrib(self.id), ))
    def exportChildren(self, outfile, level, namespace_='inv:', name_='target'):
        if self.cloudAlias is not None:
            showIndent(outfile, level)
            outfile.write('<%scloudAlias>%s</%scloudAlias>\n' % (namespace_, self.format_string(quote_xml(self.cloudAlias).encode(ExternalEncoding), input_name='cloudAlias'), namespace_))
        if self.cloudName is not None:
            showIndent(outfile, level)
            outfile.write('<%scloudName>%s</%scloudName>\n' % (namespace_, self.format_string(quote_xml(self.cloudName).encode(ExternalEncoding), input_name='cloudName'), namespace_))
        if self.type_:
            self.type_.export(outfile, level, namespace_, name_='type', )
    def hasContent_(self):
        if (
            self.cloudAlias is not None or
            self.cloudName is not None or
            self.type_ is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='target'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        if self.id is not None:
            showIndent(outfile, level)
            outfile.write('id = %s,\n' % (self.id,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.cloudAlias is not None:
            showIndent(outfile, level)
            outfile.write('cloudAlias=%s,\n' % quote_python(self.cloudAlias).encode(ExternalEncoding))
        if self.cloudName is not None:
            showIndent(outfile, level)
            outfile.write('cloudName=%s,\n' % quote_python(self.cloudName).encode(ExternalEncoding))
        if self.type_ is not None:
            showIndent(outfile, level)
            outfile.write('type_=model_.type_(\n')
            self.type_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('id'):
            self.id = attrs.get('id').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'cloudAlias':
            cloudAlias_ = ''
            for text__content_ in child_.childNodes:
                cloudAlias_ += text__content_.nodeValue
            self.cloudAlias = cloudAlias_
            self.validate_cloudAlias(self.cloudAlias)    # validate type cloudAlias
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'cloudName':
            cloudName_ = ''
            for text__content_ in child_.childNodes:
                cloudName_ += text__content_.nodeValue
            self.cloudName = cloudName_
            self.validate_cloudName(self.cloudName)    # validate type cloudName
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'type':
            obj_ = type_.factory()
            obj_.build(child_)
            self.set_type(obj_)
# end class target


class type_(GeneratedsSuper):
    member_data_items_ = [
        MemberSpec_('href', 'inv:string8092', 0),
        MemberSpec_('valueOf_', [], 0),
        ]
    subclass = None
    superclass = None
    def __init__(self, href=None, valueOf_=''):
        self.href = _cast(None, href)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if type_.subclass:
            return type_.subclass(*args_, **kwargs_)
        else:
            return type_(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_href(self): return self.href
    def set_href(self, href): self.href = href
    def getValueOf_(self): return self.valueOf_
    def setValueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def export(self, outfile, level, namespace_='inv:', name_='type', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        self.exportAttributes(outfile, level, namespace_, name_='type')
        if self.hasContent_():
            outfile.write('>')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, namespace_='inv:', name_='type'):
        if self.href is not None:
            outfile.write(' href=%s' % (quote_attrib(self.href), ))
    def exportChildren(self, outfile, level, namespace_='inv:', name_='type'):
        if self.valueOf_.find('![CDATA') > -1:
            value=quote_xml('%s' % self.valueOf_)
            value=value.replace('![CDATA','<![CDATA')
            value=value.replace(']]',']]>')
            outfile.write(value.encode(ExternalEncoding))
        else:
            outfile.write(quote_xml('%s' % self.valueOf_.encode(ExternalEncoding)))
    def hasContent_(self):
        if (
            self.valueOf_
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='type'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        if self.href is not None:
            showIndent(outfile, level)
            outfile.write('href = %s,\n' % (self.href,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('valueOf_ = """%s""",\n' % (self.valueOf_,))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        self.valueOf_ = ''
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('href'):
            self.href = attrs.get('href').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.TEXT_NODE:
            self.valueOf_ += child_.nodeValue
        elif child_.nodeType == Node.CDATA_SECTION_NODE:
            self.valueOf_ += '![CDATA['+child_.nodeValue+']]'
# end class type_


class system_log_entry(GeneratedsSuper):
    member_data_items_ = [
        MemberSpec_('entry', ['string8092', 'xsd:token'], 0),
        MemberSpec_('entry_date', 'xsd:positiveInteger', 0),
        ]
    subclass = None
    superclass = None
    def __init__(self, entry=None, entry_date=None):
        self.entry = entry
        self.entry_date = entry_date
    def factory(*args_, **kwargs_):
        if system_log_entry.subclass:
            return system_log_entry.subclass(*args_, **kwargs_)
        else:
            return system_log_entry(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_entry(self): return self.entry
    def set_entry(self, entry): self.entry = entry
    def validate_entry(self, value):
        # validate type entry
        pass
    def get_entry_date(self): return self.entry_date
    def set_entry_date(self, entry_date): self.entry_date = entry_date
    def export(self, outfile, level, namespace_='inv:', name_='system_log_entry', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        self.exportAttributes(outfile, level, namespace_, name_='system_log_entry')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, namespace_='inv:', name_='system_log_entry'):
        pass
    def exportChildren(self, outfile, level, namespace_='inv:', name_='system_log_entry'):
        if self.entry is not None:
            showIndent(outfile, level)
            outfile.write('<%sentry>%s</%sentry>\n' % (namespace_, self.format_string(quote_xml(self.entry).encode(ExternalEncoding), input_name='entry'), namespace_))
        if self.entry_date is not None:
            showIndent(outfile, level)
            outfile.write('<%sentry_date>%s</%sentry_date>\n' % (namespace_, self.format_integer(self.entry_date, input_name='entry_date'), namespace_))
    def hasContent_(self):
        if (
            self.entry is not None or
            self.entry_date is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='system_log_entry'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.entry is not None:
            showIndent(outfile, level)
            outfile.write('entry=%s,\n' % quote_python(self.entry).encode(ExternalEncoding))
        if self.entry_date is not None:
            showIndent(outfile, level)
            outfile.write('entry_date=%d,\n' % self.entry_date)
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'entry':
            entry_ = ''
            for text__content_ in child_.childNodes:
                entry_ += text__content_.nodeValue
            self.entry = entry_
            self.validate_entry(self.entry)    # validate type entry
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'entry_date':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    ival_ = int(sval_)
                except ValueError, exp:
                    raise ValueError('requires integer (entry_date): %s' % exp)
                if ival_ <= 0:
                    raise ValueError('requires positiveInteger -- %s' % child_.toxml())
                self.entry_date = ival_
# end class system_log_entry


class system_log(GeneratedsSuper):
    member_data_items_ = [
        MemberSpec_('system_log_entry', 'system_log_entry', 1),
        ]
    subclass = None
    superclass = None
    def __init__(self, system_log_entry=None):
        if system_log_entry is None:
            self.system_log_entry = []
        else:
            self.system_log_entry = system_log_entry
    def factory(*args_, **kwargs_):
        if system_log.subclass:
            return system_log.subclass(*args_, **kwargs_)
        else:
            return system_log(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_system_log_entry(self): return self.system_log_entry
    def set_system_log_entry(self, system_log_entry): self.system_log_entry = system_log_entry
    def add_system_log_entry(self, value): self.system_log_entry.append(value)
    def insert_system_log_entry(self, index, value): self.system_log_entry[index] = value
    def export(self, outfile, level, namespace_='inv:', name_='system_log', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        self.exportAttributes(outfile, level, namespace_, name_='system_log')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, namespace_='inv:', name_='system_log'):
        pass
    def exportChildren(self, outfile, level, namespace_='inv:', name_='system_log'):
        for system_log_entry_ in self.system_log_entry:
            system_log_entry_.export(outfile, level, namespace_, name_='system_log_entry')
    def hasContent_(self):
        if (
            self.system_log_entry
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='system_log'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('system_log_entry=[\n')
        level += 1
        for system_log_entry_ in self.system_log_entry:
            showIndent(outfile, level)
            outfile.write('model_.system_log_entry(\n')
            system_log_entry_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'system_log_entry':
            obj_ = system_log_entry.factory()
            obj_.build(child_)
            self.system_log_entry.append(obj_)
# end class system_log


class systemInformationType(GeneratedsSuper):
    member_data_items_ = [
        MemberSpec_('systemName', ['string64', 'xsd:token'], 0),
        MemberSpec_('memory', 'xsd:positiveInteger', 0),
        MemberSpec_('osType', ['string64', 'xsd:token'], 0),
        MemberSpec_('osMajorVersion', ['string64', 'xsd:token'], 0),
        MemberSpec_('osMinorVersion', ['string32', 'xsd:token'], 0),
        MemberSpec_('systemType', ['string32', 'xsd:token'], 0),
        ]
    subclass = None
    superclass = None
    def __init__(self, systemName=None, memory=None, osType=None, osMajorVersion=None, osMinorVersion=None, systemType=None):
        self.systemName = systemName
        self.memory = memory
        self.osType = osType
        self.osMajorVersion = osMajorVersion
        self.osMinorVersion = osMinorVersion
        self.systemType = systemType
    def factory(*args_, **kwargs_):
        if systemInformationType.subclass:
            return systemInformationType.subclass(*args_, **kwargs_)
        else:
            return systemInformationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_systemName(self): return self.systemName
    def set_systemName(self, systemName): self.systemName = systemName
    def validate_systemName(self, value):
        # validate type systemName
        pass
    def get_memory(self): return self.memory
    def set_memory(self, memory): self.memory = memory
    def get_osType(self): return self.osType
    def set_osType(self, osType): self.osType = osType
    def validate_osType(self, value):
        # validate type osType
        pass
    def get_osMajorVersion(self): return self.osMajorVersion
    def set_osMajorVersion(self, osMajorVersion): self.osMajorVersion = osMajorVersion
    def validate_osMajorVersion(self, value):
        # validate type osMajorVersion
        pass
    def get_osMinorVersion(self): return self.osMinorVersion
    def set_osMinorVersion(self, osMinorVersion): self.osMinorVersion = osMinorVersion
    def validate_osMinorVersion(self, value):
        # validate type osMinorVersion
        pass
    def get_systemType(self): return self.systemType
    def set_systemType(self, systemType): self.systemType = systemType
    def validate_systemType(self, value):
        # validate type systemType
        pass
    def export(self, outfile, level, namespace_='inv:', name_='systemInformationType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        self.exportAttributes(outfile, level, namespace_, name_='systemInformationType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, namespace_='inv:', name_='systemInformationType'):
        pass
    def exportChildren(self, outfile, level, namespace_='inv:', name_='systemInformationType'):
        if self.systemName is not None:
            showIndent(outfile, level)
            outfile.write('<%ssystemName>%s</%ssystemName>\n' % (namespace_, self.format_string(quote_xml(self.systemName).encode(ExternalEncoding), input_name='systemName'), namespace_))
        if self.memory is not None:
            showIndent(outfile, level)
            outfile.write('<%smemory>%s</%smemory>\n' % (namespace_, self.format_integer(self.memory, input_name='memory'), namespace_))
        if self.osType is not None:
            showIndent(outfile, level)
            outfile.write('<%sosType>%s</%sosType>\n' % (namespace_, self.format_string(quote_xml(self.osType).encode(ExternalEncoding), input_name='osType'), namespace_))
        if self.osMajorVersion is not None:
            showIndent(outfile, level)
            outfile.write('<%sosMajorVersion>%s</%sosMajorVersion>\n' % (namespace_, self.format_string(quote_xml(self.osMajorVersion).encode(ExternalEncoding), input_name='osMajorVersion'), namespace_))
        if self.osMinorVersion is not None:
            showIndent(outfile, level)
            outfile.write('<%sosMinorVersion>%s</%sosMinorVersion>\n' % (namespace_, self.format_string(quote_xml(self.osMinorVersion).encode(ExternalEncoding), input_name='osMinorVersion'), namespace_))
        if self.systemType is not None:
            showIndent(outfile, level)
            outfile.write('<%ssystemType>%s</%ssystemType>\n' % (namespace_, self.format_string(quote_xml(self.systemType).encode(ExternalEncoding), input_name='systemType'), namespace_))
    def hasContent_(self):
        if (
            self.systemName is not None or
            self.memory is not None or
            self.osType is not None or
            self.osMajorVersion is not None or
            self.osMinorVersion is not None or
            self.systemType is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='systemInformationType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.systemName is not None:
            showIndent(outfile, level)
            outfile.write('systemName=%s,\n' % quote_python(self.systemName).encode(ExternalEncoding))
        if self.memory is not None:
            showIndent(outfile, level)
            outfile.write('memory=%d,\n' % self.memory)
        if self.osType is not None:
            showIndent(outfile, level)
            outfile.write('osType=%s,\n' % quote_python(self.osType).encode(ExternalEncoding))
        if self.osMajorVersion is not None:
            showIndent(outfile, level)
            outfile.write('osMajorVersion=%s,\n' % quote_python(self.osMajorVersion).encode(ExternalEncoding))
        if self.osMinorVersion is not None:
            showIndent(outfile, level)
            outfile.write('osMinorVersion=%s,\n' % quote_python(self.osMinorVersion).encode(ExternalEncoding))
        if self.systemType is not None:
            showIndent(outfile, level)
            outfile.write('systemType=%s,\n' % quote_python(self.systemType).encode(ExternalEncoding))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'systemName':
            systemName_ = ''
            for text__content_ in child_.childNodes:
                systemName_ += text__content_.nodeValue
            self.systemName = systemName_
            self.validate_systemName(self.systemName)    # validate type systemName
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'memory':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    ival_ = int(sval_)
                except ValueError, exp:
                    raise ValueError('requires integer (memory): %s' % exp)
                if ival_ <= 0:
                    raise ValueError('requires positiveInteger -- %s' % child_.toxml())
                self.memory = ival_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'osType':
            osType_ = ''
            for text__content_ in child_.childNodes:
                osType_ += text__content_.nodeValue
            self.osType = osType_
            self.validate_osType(self.osType)    # validate type osType
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'osMajorVersion':
            osMajorVersion_ = ''
            for text__content_ in child_.childNodes:
                osMajorVersion_ += text__content_.nodeValue
            self.osMajorVersion = osMajorVersion_
            self.validate_osMajorVersion(self.osMajorVersion)    # validate type osMajorVersion
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'osMinorVersion':
            osMinorVersion_ = ''
            for text__content_ in child_.childNodes:
                osMinorVersion_ += text__content_.nodeValue
            self.osMinorVersion = osMinorVersion_
            self.validate_osMinorVersion(self.osMinorVersion)    # validate type osMinorVersion
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'systemType':
            systemType_ = ''
            for text__content_ in child_.childNodes:
                systemType_ += text__content_.nodeValue
            self.systemType = systemType_
            self.validate_systemType(self.systemType)    # validate type systemType
# end class systemInformationType


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""

def usage():
    print USAGE_TEXT
    sys.exit(1)


def parse(inFileName):
    doc = minidom.parse(inFileName)
    rootNode = doc.documentElement
    rootObj = inventory.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
##     sys.stdout.write('<?xml version="1.0" ?>\n')
##     rootObj.export(sys.stdout, 0, name_="inventory", 
##         namespacedef_='')
    return rootObj


def parseString(inString):
    doc = minidom.parseString(inString)
    rootNode = doc.documentElement
    rootObj = inventory.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
##     sys.stdout.write('<?xml version="1.0" ?>\n')
##     rootObj.export(sys.stdout, 0, name_="inventory",
##         namespacedef_='')
    return rootObj


def parseLiteral(inFileName):
    doc = minidom.parse(inFileName)
    rootNode = doc.documentElement
    rootObj = inventory.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
##     sys.stdout.write('#from generateds_system_1_0 import *\n\n')
##     sys.stdout.write('import generateds_system_1_0 as model_\n\n')
##     sys.stdout.write('rootObj = model_.inventory(\n')
##     rootObj.exportLiteral(sys.stdout, 0, name_="inventory")
##     sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()

