#!/usr/bin/env python

#
# Generated  by generateDS.py.
#

import sys
import getopt
from string import lower as str_lower
from xml.dom import minidom
from xml.dom import Node

#
# User methods
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError, exp:

    class GeneratedsSuper(object):
        def format_string(self, input_data, input_name=''):
            return input_data
        def format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def format_float(self, input_data, input_name=''):
            return '%f' % input_data
        def format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def format_boolean(self, input_data, input_name=''):
            return '%s' % input_data


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'utf-8'

#
# Support/utility functions.
#

def showIndent(outfile, level):
    for idx in range(level):
        outfile.write('    ')

def quote_xml(inStr):
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1

def quote_attrib(inStr):
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1

def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace):
        if self.category == MixedContainer.CategoryText:
            outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(outfile, level, namespace,name)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (self.name, self.value, self.name))
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write('model_.MixedContainer(%d, %d, "%s", "%s"),\n' % \
                (self.category, self.content_type, self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write('model_.MixedContainer(%d, %d, "%s", "%s"),\n' % \
                (self.category, self.content_type, self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write('model_.MixedContainer(%d, %d, "%s",\n' % \
                (self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0):
        self.name = name
        self.data_type = data_type
        self.container = container
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container

def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#

class inventory(GeneratedsSuper):
    member_data_items_ = [
        MemberSpec_('systems', 'href_node', 0),
        MemberSpec_('log', 'href_node', 0),
        ]
    subclass = None
    superclass = None
    def __init__(self, systems=None, log=None):
        self.systems = systems
        self.log = log
    def factory(*args_, **kwargs_):
        if inventory.subclass:
            return inventory.subclass(*args_, **kwargs_)
        else:
            return inventory(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_systems(self): return self.systems
    def set_systems(self, systems): self.systems = systems
    def get_log(self): return self.log
    def set_log(self, log): self.log = log
    def export(self, outfile, level, namespace_='inv:', name_='inventory', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        self.exportAttributes(outfile, level, namespace_, name_='inventory')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, namespace_='inv:', name_='inventory'):
        pass
    def exportChildren(self, outfile, level, namespace_='inv:', name_='inventory'):
        if self.systems:
            self.systems.export(outfile, level, namespace_, name_='systems', )
        if self.log:
            self.log.export(outfile, level, namespace_, name_='log', )
    def hasContent_(self):
        if (
            self.systems is not None or
            self.log is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='inventory'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.systems is not None:
            showIndent(outfile, level)
            outfile.write('systems=model_.href_node(\n')
            self.systems.exportLiteral(outfile, level, name_='systems')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.log is not None:
            showIndent(outfile, level)
            outfile.write('log=model_.href_node(\n')
            self.log.exportLiteral(outfile, level, name_='log')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'systems':
            obj_ = href_node.factory()
            obj_.build(child_)
            self.set_systems(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'log':
            obj_ = href_node.factory()
            obj_.build(child_)
            self.set_log(obj_)
# end class inventory


class href_node(GeneratedsSuper):
    member_data_items_ = [
        MemberSpec_('href', 'inv:string8092', 0),
        MemberSpec_('valueOf_', [], 0),
        ]
    subclass = None
    superclass = None
    def __init__(self, href=None, valueOf_=''):
        self.href = _cast(None, href)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if href_node.subclass:
            return href_node.subclass(*args_, **kwargs_)
        else:
            return href_node(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_href(self): return self.href
    def set_href(self, href): self.href = href
    def getValueOf_(self): return self.valueOf_
    def setValueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def export(self, outfile, level, namespace_='inv:', name_='href_node', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        self.exportAttributes(outfile, level, namespace_, name_='href_node')
        if self.hasContent_():
            outfile.write('>')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, namespace_='inv:', name_='href_node'):
        if self.href is not None:
            outfile.write(' href=%s' % (quote_attrib(self.href), ))
    def exportChildren(self, outfile, level, namespace_='inv:', name_='href_node'):
        if self.valueOf_.find('![CDATA') > -1:
            value=quote_xml('%s' % self.valueOf_)
            value=value.replace('![CDATA','<![CDATA')
            value=value.replace(']]',']]>')
            outfile.write(value.encode(ExternalEncoding))
        else:
            outfile.write(quote_xml('%s' % self.valueOf_.encode(ExternalEncoding)))
    def hasContent_(self):
        if (
            self.valueOf_
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='href_node'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        if self.href is not None:
            showIndent(outfile, level)
            outfile.write('href = %s,\n' % (self.href,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('valueOf_ = """%s""",\n' % (self.valueOf_,))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        self.valueOf_ = ''
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('href'):
            self.href = attrs.get('href').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.TEXT_NODE:
            self.valueOf_ += child_.nodeValue
        elif child_.nodeType == Node.CDATA_SECTION_NODE:
            self.valueOf_ += '![CDATA['+child_.nodeValue+']]'
# end class href_node


class systems(GeneratedsSuper):
    member_data_items_ = [
        MemberSpec_('system', 'system', 1),
        ]
    subclass = None
    superclass = None
    def __init__(self, system=None):
        if system is None:
            self.system = []
        else:
            self.system = system
    def factory(*args_, **kwargs_):
        if systems.subclass:
            return systems.subclass(*args_, **kwargs_)
        else:
            return systems(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_system(self): return self.system
    def set_system(self, system): self.system = system
    def add_system(self, value): self.system.append(value)
    def insert_system(self, index, value): self.system[index] = value
    def export(self, outfile, level, namespace_='inv:', name_='systems', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        self.exportAttributes(outfile, level, namespace_, name_='systems')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, namespace_='inv:', name_='systems'):
        pass
    def exportChildren(self, outfile, level, namespace_='inv:', name_='systems'):
        for system_ in self.system:
            system_.export(outfile, level, namespace_, name_='system')
    def hasContent_(self):
        if (
            self.system
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='systems'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('system=[\n')
        level += 1
        for system_ in self.system:
            showIndent(outfile, level)
            outfile.write('model_.system(\n')
            system_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'system':
            obj_ = system.factory()
            obj_.build(child_)
            self.system.append(obj_)
# end class systems


class log(GeneratedsSuper):
    member_data_items_ = [
        MemberSpec_('valueOf_', [], 0),
        ]
    subclass = None
    superclass = None
    def __init__(self, valueOf_=''):
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if log.subclass:
            return log.subclass(*args_, **kwargs_)
        else:
            return log(*args_, **kwargs_)
    factory = staticmethod(factory)
    def getValueOf_(self): return self.valueOf_
    def setValueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def export(self, outfile, level, namespace_='inv:', name_='log', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        self.exportAttributes(outfile, level, namespace_, name_='log')
        if self.hasContent_():
            outfile.write('>')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, namespace_='inv:', name_='log'):
        pass
    def exportChildren(self, outfile, level, namespace_='inv:', name_='log'):
        if self.valueOf_.find('![CDATA') > -1:
            value=quote_xml('%s' % self.valueOf_)
            value=value.replace('![CDATA','<![CDATA')
            value=value.replace(']]',']]>')
            outfile.write(value.encode(ExternalEncoding))
        else:
            outfile.write(quote_xml('%s' % self.valueOf_.encode(ExternalEncoding)))
    def hasContent_(self):
        if (
            self.valueOf_
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='log'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('valueOf_ = """%s""",\n' % (self.valueOf_,))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        self.valueOf_ = ''
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.TEXT_NODE:
            self.valueOf_ += child_.nodeValue
        elif child_.nodeType == Node.CDATA_SECTION_NODE:
            self.valueOf_ += '![CDATA['+child_.nodeValue+']]'
# end class log


class system(GeneratedsSuper):
    member_data_items_ = [
        MemberSpec_('id', 'inv:string8092', 0),
        MemberSpec_('generated_uuid', ['string64', 'xsd:token'], 0),
        MemberSpec_('local_uuid', ['string64', 'xsd:token'], 0),
        MemberSpec_('registration_date', 'xsd:string', 0),
        MemberSpec_('launch_date', 'xsd:string', 0),
        MemberSpec_('ssl_client_certificate', ['string8092', 'xsd:token'], 0),
        MemberSpec_('ssl_client_key', ['string8092', 'xsd:token'], 0),
        MemberSpec_('ssl_server_certificate', ['string8092', 'xsd:token'], 0),
        MemberSpec_('launching_user', ['string8092', 'xsd:token'], 0),
        MemberSpec_('target_type', ['string8092', 'xsd:token'], 0),
        MemberSpec_('description', ['string8092', 'xsd:token'], 0),
        MemberSpec_('name', ['string8092', 'xsd:token'], 0),
        MemberSpec_('hostname', ['string8092', 'xsd:token'], 0),
        MemberSpec_('current_state', 'current_state', 0),
        MemberSpec_('target', 'href_node', 0),
        MemberSpec_('target_system_id', ['string8092', 'xsd:token'], 0),
        MemberSpec_('target_system_name', ['string8092', 'xsd:token'], 0),
        MemberSpec_('target_system_description', ['string8092', 'xsd:token'], 0),
        MemberSpec_('target_system_state', ['string8092', 'xsd:token'], 0),
        MemberSpec_('system_log', 'href_node', 0),
        MemberSpec_('agent_port', 'xsd:string', 0),
        MemberSpec_('event_uuid', ['string64', 'xsd:token'], 0),
        MemberSpec_('boot_uuid', ['string64', 'xsd:token'], 0),
        MemberSpec_('networks', 'networks', 0),
        MemberSpec_('management_interface', 'management_interface', 0),
        ]
    subclass = None
    superclass = None
    def __init__(self, id=None, generated_uuid=None, local_uuid=None, registration_date=None, launch_date=None, ssl_client_certificate=None, ssl_client_key=None, ssl_server_certificate=None, launching_user=None, target_type=None, description=None, name=None, hostname=None, current_state=None, target=None, target_system_id=None, target_system_name=None, target_system_description=None, target_system_state=None, system_log=None, agent_port=None, event_uuid=None, boot_uuid=None, networks=None, management_interface=None):
        self.id = _cast(None, id)
        self.generated_uuid = generated_uuid
        self.local_uuid = local_uuid
        self.registration_date = registration_date
        self.launch_date = launch_date
        self.ssl_client_certificate = ssl_client_certificate
        self.ssl_client_key = ssl_client_key
        self.ssl_server_certificate = ssl_server_certificate
        self.launching_user = launching_user
        self.target_type = target_type
        self.description = description
        self.name = name
        self.hostname = hostname
        self.current_state = current_state
        self.target = target
        self.target_system_id = target_system_id
        self.target_system_name = target_system_name
        self.target_system_description = target_system_description
        self.target_system_state = target_system_state
        self.system_log = system_log
        self.agent_port = agent_port
        self.event_uuid = event_uuid
        self.boot_uuid = boot_uuid
        self.networks = networks
        self.management_interface = management_interface
    def factory(*args_, **kwargs_):
        if system.subclass:
            return system.subclass(*args_, **kwargs_)
        else:
            return system(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_generated_uuid(self): return self.generated_uuid
    def set_generated_uuid(self, generated_uuid): self.generated_uuid = generated_uuid
    def validate_generated_uuid(self, value):
        # validate type generated_uuid
        pass
    def get_local_uuid(self): return self.local_uuid
    def set_local_uuid(self, local_uuid): self.local_uuid = local_uuid
    def validate_local_uuid(self, value):
        # validate type local_uuid
        pass
    def get_registration_date(self): return self.registration_date
    def set_registration_date(self, registration_date): self.registration_date = registration_date
    def get_launch_date(self): return self.launch_date
    def set_launch_date(self, launch_date): self.launch_date = launch_date
    def get_ssl_client_certificate(self): return self.ssl_client_certificate
    def set_ssl_client_certificate(self, ssl_client_certificate): self.ssl_client_certificate = ssl_client_certificate
    def validate_ssl_client_certificate(self, value):
        # validate type ssl_client_certificate
        pass
    def get_ssl_client_key(self): return self.ssl_client_key
    def set_ssl_client_key(self, ssl_client_key): self.ssl_client_key = ssl_client_key
    def validate_ssl_client_key(self, value):
        # validate type ssl_client_key
        pass
    def get_ssl_server_certificate(self): return self.ssl_server_certificate
    def set_ssl_server_certificate(self, ssl_server_certificate): self.ssl_server_certificate = ssl_server_certificate
    def validate_ssl_server_certificate(self, value):
        # validate type ssl_server_certificate
        pass
    def get_launching_user(self): return self.launching_user
    def set_launching_user(self, launching_user): self.launching_user = launching_user
    def validate_launching_user(self, value):
        # validate type launching_user
        pass
    def get_target_type(self): return self.target_type
    def set_target_type(self, target_type): self.target_type = target_type
    def validate_target_type(self, value):
        # validate type target_type
        pass
    def get_description(self): return self.description
    def set_description(self, description): self.description = description
    def validate_description(self, value):
        # validate type description
        pass
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def validate_name(self, value):
        # validate type name
        pass
    def get_hostname(self): return self.hostname
    def set_hostname(self, hostname): self.hostname = hostname
    def validate_hostname(self, value):
        # validate type hostname
        pass
    def get_current_state(self): return self.current_state
    def set_current_state(self, current_state): self.current_state = current_state
    def get_target(self): return self.target
    def set_target(self, target): self.target = target
    def get_target_system_id(self): return self.target_system_id
    def set_target_system_id(self, target_system_id): self.target_system_id = target_system_id
    def validate_target_system_id(self, value):
        # validate type target_system_id
        pass
    def get_target_system_name(self): return self.target_system_name
    def set_target_system_name(self, target_system_name): self.target_system_name = target_system_name
    def validate_target_system_name(self, value):
        # validate type target_system_name
        pass
    def get_target_system_description(self): return self.target_system_description
    def set_target_system_description(self, target_system_description): self.target_system_description = target_system_description
    def validate_target_system_description(self, value):
        # validate type target_system_description
        pass
    def get_target_system_state(self): return self.target_system_state
    def set_target_system_state(self, target_system_state): self.target_system_state = target_system_state
    def validate_target_system_state(self, value):
        # validate type target_system_state
        pass
    def get_system_log(self): return self.system_log
    def set_system_log(self, system_log): self.system_log = system_log
    def get_agent_port(self): return self.agent_port
    def set_agent_port(self, agent_port): self.agent_port = agent_port
    def get_event_uuid(self): return self.event_uuid
    def set_event_uuid(self, event_uuid): self.event_uuid = event_uuid
    def validate_event_uuid(self, value):
        # validate type event_uuid
        pass
    def get_boot_uuid(self): return self.boot_uuid
    def set_boot_uuid(self, boot_uuid): self.boot_uuid = boot_uuid
    def validate_boot_uuid(self, value):
        # validate type boot_uuid
        pass
    def get_networks(self): return self.networks
    def set_networks(self, networks): self.networks = networks
    def get_management_interface(self): return self.management_interface
    def set_management_interface(self, management_interface): self.management_interface = management_interface
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def export(self, outfile, level, namespace_='inv:', name_='system', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        self.exportAttributes(outfile, level, namespace_, name_='system')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, namespace_='inv:', name_='system'):
        if self.id is not None:
            outfile.write(' id=%s' % (quote_attrib(self.id), ))
    def exportChildren(self, outfile, level, namespace_='inv:', name_='system'):
        if self.generated_uuid is not None:
            showIndent(outfile, level)
            outfile.write('<%sgenerated_uuid>%s</%sgenerated_uuid>\n' % (namespace_, self.format_string(quote_xml(self.generated_uuid).encode(ExternalEncoding), input_name='generated_uuid'), namespace_))
        if self.local_uuid is not None:
            showIndent(outfile, level)
            outfile.write('<%slocal_uuid>%s</%slocal_uuid>\n' % (namespace_, self.format_string(quote_xml(self.local_uuid).encode(ExternalEncoding), input_name='local_uuid'), namespace_))
        if self.registration_date is not None:
            showIndent(outfile, level)
            outfile.write('<%sregistration_date>%s</%sregistration_date>\n' % (namespace_, self.format_string(quote_xml(self.registration_date).encode(ExternalEncoding), input_name='registration_date'), namespace_))
        if self.launch_date is not None:
            showIndent(outfile, level)
            outfile.write('<%slaunch_date>%s</%slaunch_date>\n' % (namespace_, self.format_string(quote_xml(self.launch_date).encode(ExternalEncoding), input_name='launch_date'), namespace_))
        if self.ssl_client_certificate is not None:
            showIndent(outfile, level)
            outfile.write('<%sssl_client_certificate>%s</%sssl_client_certificate>\n' % (namespace_, self.format_string(quote_xml(self.ssl_client_certificate).encode(ExternalEncoding), input_name='ssl_client_certificate'), namespace_))
        if self.ssl_client_key is not None:
            showIndent(outfile, level)
            outfile.write('<%sssl_client_key>%s</%sssl_client_key>\n' % (namespace_, self.format_string(quote_xml(self.ssl_client_key).encode(ExternalEncoding), input_name='ssl_client_key'), namespace_))
        if self.ssl_server_certificate is not None:
            showIndent(outfile, level)
            outfile.write('<%sssl_server_certificate>%s</%sssl_server_certificate>\n' % (namespace_, self.format_string(quote_xml(self.ssl_server_certificate).encode(ExternalEncoding), input_name='ssl_server_certificate'), namespace_))
        if self.launching_user is not None:
            showIndent(outfile, level)
            outfile.write('<%slaunching_user>%s</%slaunching_user>\n' % (namespace_, self.format_string(quote_xml(self.launching_user).encode(ExternalEncoding), input_name='launching_user'), namespace_))
        if self.target_type is not None:
            showIndent(outfile, level)
            outfile.write('<%starget_type>%s</%starget_type>\n' % (namespace_, self.format_string(quote_xml(self.target_type).encode(ExternalEncoding), input_name='target_type'), namespace_))
        if self.description is not None:
            showIndent(outfile, level)
            outfile.write('<%sdescription>%s</%sdescription>\n' % (namespace_, self.format_string(quote_xml(self.description).encode(ExternalEncoding), input_name='description'), namespace_))
        if self.name is not None:
            showIndent(outfile, level)
            outfile.write('<%sname>%s</%sname>\n' % (namespace_, self.format_string(quote_xml(self.name).encode(ExternalEncoding), input_name='name'), namespace_))
        if self.hostname is not None:
            showIndent(outfile, level)
            outfile.write('<%shostname>%s</%shostname>\n' % (namespace_, self.format_string(quote_xml(self.hostname).encode(ExternalEncoding), input_name='hostname'), namespace_))
        if self.current_state:
            self.current_state.export(outfile, level, namespace_, name_='current_state')
        if self.target:
            self.target.export(outfile, level, namespace_, name_='target')
        if self.target_system_id is not None:
            showIndent(outfile, level)
            outfile.write('<%starget_system_id>%s</%starget_system_id>\n' % (namespace_, self.format_string(quote_xml(self.target_system_id).encode(ExternalEncoding), input_name='target_system_id'), namespace_))
        if self.target_system_name is not None:
            showIndent(outfile, level)
            outfile.write('<%starget_system_name>%s</%starget_system_name>\n' % (namespace_, self.format_string(quote_xml(self.target_system_name).encode(ExternalEncoding), input_name='target_system_name'), namespace_))
        if self.target_system_description is not None:
            showIndent(outfile, level)
            outfile.write('<%starget_system_description>%s</%starget_system_description>\n' % (namespace_, self.format_string(quote_xml(self.target_system_description).encode(ExternalEncoding), input_name='target_system_description'), namespace_))
        if self.target_system_state is not None:
            showIndent(outfile, level)
            outfile.write('<%starget_system_state>%s</%starget_system_state>\n' % (namespace_, self.format_string(quote_xml(self.target_system_state).encode(ExternalEncoding), input_name='target_system_state'), namespace_))
        if self.system_log:
            self.system_log.export(outfile, level, namespace_, name_='system_log')
        if self.agent_port is not None:
            showIndent(outfile, level)
            outfile.write('<%sagent_port>%s</%sagent_port>\n' % (namespace_, self.format_string(quote_xml(self.agent_port).encode(ExternalEncoding), input_name='agent_port'), namespace_))
        if self.event_uuid is not None:
            showIndent(outfile, level)
            outfile.write('<%sevent_uuid>%s</%sevent_uuid>\n' % (namespace_, self.format_string(quote_xml(self.event_uuid).encode(ExternalEncoding), input_name='event_uuid'), namespace_))
        if self.boot_uuid is not None:
            showIndent(outfile, level)
            outfile.write('<%sboot_uuid>%s</%sboot_uuid>\n' % (namespace_, self.format_string(quote_xml(self.boot_uuid).encode(ExternalEncoding), input_name='boot_uuid'), namespace_))
        if self.networks:
            self.networks.export(outfile, level, namespace_, name_='networks', )
        if self.management_interface:
            self.management_interface.export(outfile, level, namespace_, name_='management_interface')
    def hasContent_(self):
        if (
            self.generated_uuid is not None or
            self.local_uuid is not None or
            self.registration_date is not None or
            self.launch_date is not None or
            self.ssl_client_certificate is not None or
            self.ssl_client_key is not None or
            self.ssl_server_certificate is not None or
            self.launching_user is not None or
            self.target_type is not None or
            self.description is not None or
            self.name is not None or
            self.hostname is not None or
            self.current_state is not None or
            self.target is not None or
            self.target_system_id is not None or
            self.target_system_name is not None or
            self.target_system_description is not None or
            self.target_system_state is not None or
            self.system_log is not None or
            self.agent_port is not None or
            self.event_uuid is not None or
            self.boot_uuid is not None or
            self.networks is not None or
            self.management_interface is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='system'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        if self.id is not None:
            showIndent(outfile, level)
            outfile.write('id = %s,\n' % (self.id,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.generated_uuid is not None:
            showIndent(outfile, level)
            outfile.write('generated_uuid=%s,\n' % quote_python(self.generated_uuid).encode(ExternalEncoding))
        if self.local_uuid is not None:
            showIndent(outfile, level)
            outfile.write('local_uuid=%s,\n' % quote_python(self.local_uuid).encode(ExternalEncoding))
        if self.registration_date is not None:
            showIndent(outfile, level)
            outfile.write('registration_date=%s,\n' % quote_python(self.registration_date).encode(ExternalEncoding))
        if self.launch_date is not None:
            showIndent(outfile, level)
            outfile.write('launch_date=%s,\n' % quote_python(self.launch_date).encode(ExternalEncoding))
        if self.ssl_client_certificate is not None:
            showIndent(outfile, level)
            outfile.write('ssl_client_certificate=%s,\n' % quote_python(self.ssl_client_certificate).encode(ExternalEncoding))
        if self.ssl_client_key is not None:
            showIndent(outfile, level)
            outfile.write('ssl_client_key=%s,\n' % quote_python(self.ssl_client_key).encode(ExternalEncoding))
        if self.ssl_server_certificate is not None:
            showIndent(outfile, level)
            outfile.write('ssl_server_certificate=%s,\n' % quote_python(self.ssl_server_certificate).encode(ExternalEncoding))
        if self.launching_user is not None:
            showIndent(outfile, level)
            outfile.write('launching_user=%s,\n' % quote_python(self.launching_user).encode(ExternalEncoding))
        if self.target_type is not None:
            showIndent(outfile, level)
            outfile.write('target_type=%s,\n' % quote_python(self.target_type).encode(ExternalEncoding))
        if self.description is not None:
            showIndent(outfile, level)
            outfile.write('description=%s,\n' % quote_python(self.description).encode(ExternalEncoding))
        if self.name is not None:
            showIndent(outfile, level)
            outfile.write('name=%s,\n' % quote_python(self.name).encode(ExternalEncoding))
        if self.hostname is not None:
            showIndent(outfile, level)
            outfile.write('hostname=%s,\n' % quote_python(self.hostname).encode(ExternalEncoding))
        if self.current_state is not None:
            showIndent(outfile, level)
            outfile.write('current_state=model_.current_state(\n')
            self.current_state.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.target is not None:
            showIndent(outfile, level)
            outfile.write('target=model_.href_node(\n')
            self.target.exportLiteral(outfile, level, name_='target')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.target_system_id is not None:
            showIndent(outfile, level)
            outfile.write('target_system_id=%s,\n' % quote_python(self.target_system_id).encode(ExternalEncoding))
        if self.target_system_name is not None:
            showIndent(outfile, level)
            outfile.write('target_system_name=%s,\n' % quote_python(self.target_system_name).encode(ExternalEncoding))
        if self.target_system_description is not None:
            showIndent(outfile, level)
            outfile.write('target_system_description=%s,\n' % quote_python(self.target_system_description).encode(ExternalEncoding))
        if self.target_system_state is not None:
            showIndent(outfile, level)
            outfile.write('target_system_state=%s,\n' % quote_python(self.target_system_state).encode(ExternalEncoding))
        if self.system_log is not None:
            showIndent(outfile, level)
            outfile.write('system_log=model_.href_node(\n')
            self.system_log.exportLiteral(outfile, level, name_='system_log')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.agent_port is not None:
            showIndent(outfile, level)
            outfile.write('agent_port=%s,\n' % quote_python(self.agent_port).encode(ExternalEncoding))
        if self.event_uuid is not None:
            showIndent(outfile, level)
            outfile.write('event_uuid=%s,\n' % quote_python(self.event_uuid).encode(ExternalEncoding))
        if self.boot_uuid is not None:
            showIndent(outfile, level)
            outfile.write('boot_uuid=%s,\n' % quote_python(self.boot_uuid).encode(ExternalEncoding))
        if self.networks is not None:
            showIndent(outfile, level)
            outfile.write('networks=model_.networks(\n')
            self.networks.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.management_interface is not None:
            showIndent(outfile, level)
            outfile.write('management_interface=model_.management_interface(\n')
            self.management_interface.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('id'):
            self.id = attrs.get('id').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'generated_uuid':
            generated_uuid_ = ''
            for text__content_ in child_.childNodes:
                generated_uuid_ += text__content_.nodeValue
            self.generated_uuid = generated_uuid_
            self.validate_generated_uuid(self.generated_uuid)    # validate type generated_uuid
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'local_uuid':
            local_uuid_ = ''
            for text__content_ in child_.childNodes:
                local_uuid_ += text__content_.nodeValue
            self.local_uuid = local_uuid_
            self.validate_local_uuid(self.local_uuid)    # validate type local_uuid
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'registration_date':
            registration_date_ = ''
            for text__content_ in child_.childNodes:
                registration_date_ += text__content_.nodeValue
            self.registration_date = registration_date_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'launch_date':
            launch_date_ = ''
            for text__content_ in child_.childNodes:
                launch_date_ += text__content_.nodeValue
            self.launch_date = launch_date_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'ssl_client_certificate':
            ssl_client_certificate_ = ''
            for text__content_ in child_.childNodes:
                ssl_client_certificate_ += text__content_.nodeValue
            self.ssl_client_certificate = ssl_client_certificate_
            self.validate_ssl_client_certificate(self.ssl_client_certificate)    # validate type ssl_client_certificate
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'ssl_client_key':
            ssl_client_key_ = ''
            for text__content_ in child_.childNodes:
                ssl_client_key_ += text__content_.nodeValue
            self.ssl_client_key = ssl_client_key_
            self.validate_ssl_client_key(self.ssl_client_key)    # validate type ssl_client_key
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'ssl_server_certificate':
            ssl_server_certificate_ = ''
            for text__content_ in child_.childNodes:
                ssl_server_certificate_ += text__content_.nodeValue
            self.ssl_server_certificate = ssl_server_certificate_
            self.validate_ssl_server_certificate(self.ssl_server_certificate)    # validate type ssl_server_certificate
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'launching_user':
            launching_user_ = ''
            for text__content_ in child_.childNodes:
                launching_user_ += text__content_.nodeValue
            self.launching_user = launching_user_
            self.validate_launching_user(self.launching_user)    # validate type launching_user
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'target_type':
            target_type_ = ''
            for text__content_ in child_.childNodes:
                target_type_ += text__content_.nodeValue
            self.target_type = target_type_
            self.validate_target_type(self.target_type)    # validate type target_type
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'description':
            description_ = ''
            for text__content_ in child_.childNodes:
                description_ += text__content_.nodeValue
            self.description = description_
            self.validate_description(self.description)    # validate type description
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'name':
            name_ = ''
            for text__content_ in child_.childNodes:
                name_ += text__content_.nodeValue
            self.name = name_
            self.validate_name(self.name)    # validate type name
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'hostname':
            hostname_ = ''
            for text__content_ in child_.childNodes:
                hostname_ += text__content_.nodeValue
            self.hostname = hostname_
            self.validate_hostname(self.hostname)    # validate type hostname
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'current_state':
            obj_ = current_state.factory()
            obj_.build(child_)
            self.set_current_state(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'target':
            obj_ = href_node.factory()
            obj_.build(child_)
            self.set_target(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'target_system_id':
            target_system_id_ = ''
            for text__content_ in child_.childNodes:
                target_system_id_ += text__content_.nodeValue
            self.target_system_id = target_system_id_
            self.validate_target_system_id(self.target_system_id)    # validate type target_system_id
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'target_system_name':
            target_system_name_ = ''
            for text__content_ in child_.childNodes:
                target_system_name_ += text__content_.nodeValue
            self.target_system_name = target_system_name_
            self.validate_target_system_name(self.target_system_name)    # validate type target_system_name
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'target_system_description':
            target_system_description_ = ''
            for text__content_ in child_.childNodes:
                target_system_description_ += text__content_.nodeValue
            self.target_system_description = target_system_description_
            self.validate_target_system_description(self.target_system_description)    # validate type target_system_description
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'target_system_state':
            target_system_state_ = ''
            for text__content_ in child_.childNodes:
                target_system_state_ += text__content_.nodeValue
            self.target_system_state = target_system_state_
            self.validate_target_system_state(self.target_system_state)    # validate type target_system_state
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'system_log':
            obj_ = href_node.factory()
            obj_.build(child_)
            self.set_system_log(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'agent_port':
            agent_port_ = ''
            for text__content_ in child_.childNodes:
                agent_port_ += text__content_.nodeValue
            self.agent_port = agent_port_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'event_uuid':
            event_uuid_ = ''
            for text__content_ in child_.childNodes:
                event_uuid_ += text__content_.nodeValue
            self.event_uuid = event_uuid_
            self.validate_event_uuid(self.event_uuid)    # validate type event_uuid
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'boot_uuid':
            boot_uuid_ = ''
            for text__content_ in child_.childNodes:
                boot_uuid_ += text__content_.nodeValue
            self.boot_uuid = boot_uuid_
            self.validate_boot_uuid(self.boot_uuid)    # validate type boot_uuid
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'networks':
            obj_ = networks.factory()
            obj_.build(child_)
            self.set_networks(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'management_interface':
            obj_ = management_interface.factory()
            obj_.build(child_)
            self.set_management_interface(obj_)
# end class system


class networks(GeneratedsSuper):
    member_data_items_ = [
        MemberSpec_('network', 'network', 1),
        ]
    subclass = None
    superclass = None
    def __init__(self, network=None):
        if network is None:
            self.network = []
        else:
            self.network = network
    def factory(*args_, **kwargs_):
        if networks.subclass:
            return networks.subclass(*args_, **kwargs_)
        else:
            return networks(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_network(self): return self.network
    def set_network(self, network): self.network = network
    def add_network(self, value): self.network.append(value)
    def insert_network(self, index, value): self.network[index] = value
    def export(self, outfile, level, namespace_='inv:', name_='networks', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        self.exportAttributes(outfile, level, namespace_, name_='networks')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, namespace_='inv:', name_='networks'):
        pass
    def exportChildren(self, outfile, level, namespace_='inv:', name_='networks'):
        for network_ in self.network:
            network_.export(outfile, level, namespace_, name_='network')
    def hasContent_(self):
        if (
            self.network
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='networks'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('network=[\n')
        level += 1
        for network_ in self.network:
            showIndent(outfile, level)
            outfile.write('model_.network(\n')
            network_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'network':
            obj_ = network.factory()
            obj_.build(child_)
            self.network.append(obj_)
# end class networks


class network(GeneratedsSuper):
    member_data_items_ = [
        MemberSpec_('ip_address', ['string15', 'xsd:token'], 0),
        MemberSpec_('ipv6_address', ['string255', 'xsd:token'], 0),
        MemberSpec_('dns_name', ['string255', 'xsd:token'], 0),
        MemberSpec_('device_name', ['string8092', 'xsd:token'], 0),
        MemberSpec_('netmask', ['string8092', 'xsd:token'], 0),
        MemberSpec_('port_type', ['string8092', 'xsd:token'], 0),
        MemberSpec_('active', 'xsd:string', 0),
        MemberSpec_('required', 'xsd:string', 0),
        ]
    subclass = None
    superclass = None
    def __init__(self, ip_address=None, ipv6_address=None, dns_name=None, device_name=None, netmask=None, port_type=None, active=None, required=None):
        self.ip_address = ip_address
        self.ipv6_address = ipv6_address
        self.dns_name = dns_name
        self.device_name = device_name
        self.netmask = netmask
        self.port_type = port_type
        self.active = active
        self.required = required
    def factory(*args_, **kwargs_):
        if network.subclass:
            return network.subclass(*args_, **kwargs_)
        else:
            return network(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ip_address(self): return self.ip_address
    def set_ip_address(self, ip_address): self.ip_address = ip_address
    def validate_ip_address(self, value):
        # validate type ip_address
        pass
    def get_ipv6_address(self): return self.ipv6_address
    def set_ipv6_address(self, ipv6_address): self.ipv6_address = ipv6_address
    def validate_ipv6_address(self, value):
        # validate type ipv6_address
        pass
    def get_dns_name(self): return self.dns_name
    def set_dns_name(self, dns_name): self.dns_name = dns_name
    def validate_dns_name(self, value):
        # validate type dns_name
        pass
    def get_device_name(self): return self.device_name
    def set_device_name(self, device_name): self.device_name = device_name
    def validate_device_name(self, value):
        # validate type device_name
        pass
    def get_netmask(self): return self.netmask
    def set_netmask(self, netmask): self.netmask = netmask
    def validate_netmask(self, value):
        # validate type netmask
        pass
    def get_port_type(self): return self.port_type
    def set_port_type(self, port_type): self.port_type = port_type
    def validate_port_type(self, value):
        # validate type port_type
        pass
    def get_active(self): return self.active
    def set_active(self, active): self.active = active
    def get_required(self): return self.required
    def set_required(self, required): self.required = required
    def export(self, outfile, level, namespace_='inv:', name_='network', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        self.exportAttributes(outfile, level, namespace_, name_='network')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, namespace_='inv:', name_='network'):
        pass
    def exportChildren(self, outfile, level, namespace_='inv:', name_='network'):
        if self.ip_address is not None:
            showIndent(outfile, level)
            outfile.write('<%sip_address>%s</%sip_address>\n' % (namespace_, self.format_string(quote_xml(self.ip_address).encode(ExternalEncoding), input_name='ip_address'), namespace_))
        if self.ipv6_address is not None:
            showIndent(outfile, level)
            outfile.write('<%sipv6_address>%s</%sipv6_address>\n' % (namespace_, self.format_string(quote_xml(self.ipv6_address).encode(ExternalEncoding), input_name='ipv6_address'), namespace_))
        if self.dns_name is not None:
            showIndent(outfile, level)
            outfile.write('<%sdns_name>%s</%sdns_name>\n' % (namespace_, self.format_string(quote_xml(self.dns_name).encode(ExternalEncoding), input_name='dns_name'), namespace_))
        if self.device_name is not None:
            showIndent(outfile, level)
            outfile.write('<%sdevice_name>%s</%sdevice_name>\n' % (namespace_, self.format_string(quote_xml(self.device_name).encode(ExternalEncoding), input_name='device_name'), namespace_))
        if self.netmask is not None:
            showIndent(outfile, level)
            outfile.write('<%snetmask>%s</%snetmask>\n' % (namespace_, self.format_string(quote_xml(self.netmask).encode(ExternalEncoding), input_name='netmask'), namespace_))
        if self.port_type is not None:
            showIndent(outfile, level)
            outfile.write('<%sport_type>%s</%sport_type>\n' % (namespace_, self.format_string(quote_xml(self.port_type).encode(ExternalEncoding), input_name='port_type'), namespace_))
        if self.active is not None:
            showIndent(outfile, level)
            outfile.write('<%sactive>%s</%sactive>\n' % (namespace_, self.format_string(quote_xml(self.active).encode(ExternalEncoding), input_name='active'), namespace_))
        if self.required is not None:
            showIndent(outfile, level)
            outfile.write('<%srequired>%s</%srequired>\n' % (namespace_, self.format_string(quote_xml(self.required).encode(ExternalEncoding), input_name='required'), namespace_))
    def hasContent_(self):
        if (
            self.ip_address is not None or
            self.ipv6_address is not None or
            self.dns_name is not None or
            self.device_name is not None or
            self.netmask is not None or
            self.port_type is not None or
            self.active is not None or
            self.required is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='network'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.ip_address is not None:
            showIndent(outfile, level)
            outfile.write('ip_address=%s,\n' % quote_python(self.ip_address).encode(ExternalEncoding))
        if self.ipv6_address is not None:
            showIndent(outfile, level)
            outfile.write('ipv6_address=%s,\n' % quote_python(self.ipv6_address).encode(ExternalEncoding))
        if self.dns_name is not None:
            showIndent(outfile, level)
            outfile.write('dns_name=%s,\n' % quote_python(self.dns_name).encode(ExternalEncoding))
        if self.device_name is not None:
            showIndent(outfile, level)
            outfile.write('device_name=%s,\n' % quote_python(self.device_name).encode(ExternalEncoding))
        if self.netmask is not None:
            showIndent(outfile, level)
            outfile.write('netmask=%s,\n' % quote_python(self.netmask).encode(ExternalEncoding))
        if self.port_type is not None:
            showIndent(outfile, level)
            outfile.write('port_type=%s,\n' % quote_python(self.port_type).encode(ExternalEncoding))
        if self.active is not None:
            showIndent(outfile, level)
            outfile.write('active=%s,\n' % quote_python(self.active).encode(ExternalEncoding))
        if self.required is not None:
            showIndent(outfile, level)
            outfile.write('required=%s,\n' % quote_python(self.required).encode(ExternalEncoding))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'ip_address':
            ip_address_ = ''
            for text__content_ in child_.childNodes:
                ip_address_ += text__content_.nodeValue
            self.ip_address = ip_address_
            self.validate_ip_address(self.ip_address)    # validate type ip_address
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'ipv6_address':
            ipv6_address_ = ''
            for text__content_ in child_.childNodes:
                ipv6_address_ += text__content_.nodeValue
            self.ipv6_address = ipv6_address_
            self.validate_ipv6_address(self.ipv6_address)    # validate type ipv6_address
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'dns_name':
            dns_name_ = ''
            for text__content_ in child_.childNodes:
                dns_name_ += text__content_.nodeValue
            self.dns_name = dns_name_
            self.validate_dns_name(self.dns_name)    # validate type dns_name
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'device_name':
            device_name_ = ''
            for text__content_ in child_.childNodes:
                device_name_ += text__content_.nodeValue
            self.device_name = device_name_
            self.validate_device_name(self.device_name)    # validate type device_name
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'netmask':
            netmask_ = ''
            for text__content_ in child_.childNodes:
                netmask_ += text__content_.nodeValue
            self.netmask = netmask_
            self.validate_netmask(self.netmask)    # validate type netmask
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'port_type':
            port_type_ = ''
            for text__content_ in child_.childNodes:
                port_type_ += text__content_.nodeValue
            self.port_type = port_type_
            self.validate_port_type(self.port_type)    # validate type port_type
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'active':
            active_ = ''
            for text__content_ in child_.childNodes:
                active_ += text__content_.nodeValue
            self.active = active_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'required':
            required_ = ''
            for text__content_ in child_.childNodes:
                required_ += text__content_.nodeValue
            self.required = required_
# end class network


class current_state(GeneratedsSuper):
    member_data_items_ = [
        MemberSpec_('name', ['system_state_name', 'xsd:token'], 0),
        MemberSpec_('description', ['string8092', 'xsd:token'], 0),
        ]
    subclass = None
    superclass = None
    def __init__(self, name=None, description=None):
        self.name = name
        self.description = description
    def factory(*args_, **kwargs_):
        if current_state.subclass:
            return current_state.subclass(*args_, **kwargs_)
        else:
            return current_state(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def validate_name(self, value):
        # validate type name
        pass
    def get_description(self): return self.description
    def set_description(self, description): self.description = description
    def validate_description(self, value):
        # validate type description
        pass
    def export(self, outfile, level, namespace_='inv:', name_='current_state', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        self.exportAttributes(outfile, level, namespace_, name_='current_state')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, namespace_='inv:', name_='current_state'):
        pass
    def exportChildren(self, outfile, level, namespace_='inv:', name_='current_state'):
        if self.name is not None:
            showIndent(outfile, level)
            outfile.write('<%sname>%s</%sname>\n' % (namespace_, self.format_string(quote_xml(self.name).encode(ExternalEncoding), input_name='name'), namespace_))
        if self.description is not None:
            showIndent(outfile, level)
            outfile.write('<%sdescription>%s</%sdescription>\n' % (namespace_, self.format_string(quote_xml(self.description).encode(ExternalEncoding), input_name='description'), namespace_))
    def hasContent_(self):
        if (
            self.name is not None or
            self.description is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='current_state'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.name is not None:
            showIndent(outfile, level)
            outfile.write('name=%s,\n' % quote_python(self.name).encode(ExternalEncoding))
        if self.description is not None:
            showIndent(outfile, level)
            outfile.write('description=%s,\n' % quote_python(self.description).encode(ExternalEncoding))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'name':
            name_ = ''
            for text__content_ in child_.childNodes:
                name_ += text__content_.nodeValue
            self.name = name_
            self.validate_name(self.name)    # validate type name
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'description':
            description_ = ''
            for text__content_ in child_.childNodes:
                description_ += text__content_.nodeValue
            self.description = description_
            self.validate_description(self.description)    # validate type description
# end class current_state


class management_interface(GeneratedsSuper):
    member_data_items_ = [
        MemberSpec_('name', ['management_interface_name', 'xsd:token'], 0),
        MemberSpec_('description', ['string8092', 'xsd:token'], 0),
        ]
    subclass = None
    superclass = None
    def __init__(self, name=None, description=None):
        self.name = name
        self.description = description
    def factory(*args_, **kwargs_):
        if management_interface.subclass:
            return management_interface.subclass(*args_, **kwargs_)
        else:
            return management_interface(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def validate_name(self, value):
        # validate type name
        pass
    def get_description(self): return self.description
    def set_description(self, description): self.description = description
    def validate_description(self, value):
        # validate type description
        pass
    def export(self, outfile, level, namespace_='inv:', name_='management_interface', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        self.exportAttributes(outfile, level, namespace_, name_='management_interface')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, namespace_='inv:', name_='management_interface'):
        pass
    def exportChildren(self, outfile, level, namespace_='inv:', name_='management_interface'):
        if self.name is not None:
            showIndent(outfile, level)
            outfile.write('<%sname>%s</%sname>\n' % (namespace_, self.format_string(quote_xml(self.name).encode(ExternalEncoding), input_name='name'), namespace_))
        if self.description is not None:
            showIndent(outfile, level)
            outfile.write('<%sdescription>%s</%sdescription>\n' % (namespace_, self.format_string(quote_xml(self.description).encode(ExternalEncoding), input_name='description'), namespace_))
    def hasContent_(self):
        if (
            self.name is not None or
            self.description is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='management_interface'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.name is not None:
            showIndent(outfile, level)
            outfile.write('name=%s,\n' % quote_python(self.name).encode(ExternalEncoding))
        if self.description is not None:
            showIndent(outfile, level)
            outfile.write('description=%s,\n' % quote_python(self.description).encode(ExternalEncoding))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'name':
            name_ = ''
            for text__content_ in child_.childNodes:
                name_ += text__content_.nodeValue
            self.name = name_
            self.validate_name(self.name)    # validate type name
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'description':
            description_ = ''
            for text__content_ in child_.childNodes:
                description_ += text__content_.nodeValue
            self.description = description_
            self.validate_description(self.description)    # validate type description
# end class management_interface


class system_log_entry(GeneratedsSuper):
    member_data_items_ = [
        MemberSpec_('entry', ['string8092', 'xsd:token'], 0),
        MemberSpec_('entry_date', 'xsd:string', 0),
        ]
    subclass = None
    superclass = None
    def __init__(self, entry=None, entry_date=None):
        self.entry = entry
        self.entry_date = entry_date
    def factory(*args_, **kwargs_):
        if system_log_entry.subclass:
            return system_log_entry.subclass(*args_, **kwargs_)
        else:
            return system_log_entry(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_entry(self): return self.entry
    def set_entry(self, entry): self.entry = entry
    def validate_entry(self, value):
        # validate type entry
        pass
    def get_entry_date(self): return self.entry_date
    def set_entry_date(self, entry_date): self.entry_date = entry_date
    def export(self, outfile, level, namespace_='inv:', name_='system_log_entry', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        self.exportAttributes(outfile, level, namespace_, name_='system_log_entry')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, namespace_='inv:', name_='system_log_entry'):
        pass
    def exportChildren(self, outfile, level, namespace_='inv:', name_='system_log_entry'):
        if self.entry is not None:
            showIndent(outfile, level)
            outfile.write('<%sentry>%s</%sentry>\n' % (namespace_, self.format_string(quote_xml(self.entry).encode(ExternalEncoding), input_name='entry'), namespace_))
        if self.entry_date is not None:
            showIndent(outfile, level)
            outfile.write('<%sentry_date>%s</%sentry_date>\n' % (namespace_, self.format_string(quote_xml(self.entry_date).encode(ExternalEncoding), input_name='entry_date'), namespace_))
    def hasContent_(self):
        if (
            self.entry is not None or
            self.entry_date is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='system_log_entry'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.entry is not None:
            showIndent(outfile, level)
            outfile.write('entry=%s,\n' % quote_python(self.entry).encode(ExternalEncoding))
        if self.entry_date is not None:
            showIndent(outfile, level)
            outfile.write('entry_date=%s,\n' % quote_python(self.entry_date).encode(ExternalEncoding))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'entry':
            entry_ = ''
            for text__content_ in child_.childNodes:
                entry_ += text__content_.nodeValue
            self.entry = entry_
            self.validate_entry(self.entry)    # validate type entry
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'entry_date':
            entry_date_ = ''
            for text__content_ in child_.childNodes:
                entry_date_ += text__content_.nodeValue
            self.entry_date = entry_date_
# end class system_log_entry


class system_log(GeneratedsSuper):
    member_data_items_ = [
        MemberSpec_('system_log_entry', 'system_log_entry', 1),
        ]
    subclass = None
    superclass = None
    def __init__(self, system_log_entry=None):
        if system_log_entry is None:
            self.system_log_entry = []
        else:
            self.system_log_entry = system_log_entry
    def factory(*args_, **kwargs_):
        if system_log.subclass:
            return system_log.subclass(*args_, **kwargs_)
        else:
            return system_log(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_system_log_entry(self): return self.system_log_entry
    def set_system_log_entry(self, system_log_entry): self.system_log_entry = system_log_entry
    def add_system_log_entry(self, value): self.system_log_entry.append(value)
    def insert_system_log_entry(self, index, value): self.system_log_entry[index] = value
    def export(self, outfile, level, namespace_='inv:', name_='system_log', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        self.exportAttributes(outfile, level, namespace_, name_='system_log')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, namespace_='inv:', name_='system_log'):
        pass
    def exportChildren(self, outfile, level, namespace_='inv:', name_='system_log'):
        for system_log_entry_ in self.system_log_entry:
            system_log_entry_.export(outfile, level, namespace_, name_='system_log_entry')
    def hasContent_(self):
        if (
            self.system_log_entry
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='system_log'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('system_log_entry=[\n')
        level += 1
        for system_log_entry_ in self.system_log_entry:
            showIndent(outfile, level)
            outfile.write('model_.system_log_entry(\n')
            system_log_entry_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'system_log_entry':
            obj_ = system_log_entry.factory()
            obj_.build(child_)
            self.system_log_entry.append(obj_)
# end class system_log


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""

def usage():
    print USAGE_TEXT
    sys.exit(1)


def parse(inFileName):
    doc = minidom.parse(inFileName)
    rootNode = doc.documentElement
    rootObj = inventory.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
##     sys.stdout.write('<?xml version="1.0" ?>\n')
##     rootObj.export(sys.stdout, 0, name_="inventory", 
##         namespacedef_='')
    return rootObj


def parseString(inString):
    doc = minidom.parseString(inString)
    rootNode = doc.documentElement
    rootObj = inventory.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
##     sys.stdout.write('<?xml version="1.0" ?>\n')
##     rootObj.export(sys.stdout, 0, name_="inventory",
##         namespacedef_='')
    return rootObj


def parseLiteral(inFileName):
    doc = minidom.parse(inFileName)
    rootNode = doc.documentElement
    rootObj = inventory.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
##     sys.stdout.write('#from generateds_system_1_0 import *\n\n')
##     sys.stdout.write('import generateds_system_1_0 as model_\n\n')
##     sys.stdout.write('rootObj = model_.inventory(\n')
##     rootObj.exportLiteral(sys.stdout, 0, name_="inventory")
##     sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()

