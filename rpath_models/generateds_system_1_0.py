#!/usr/bin/env python

#
# Generated  by generateDS.py.
#

import sys
import getopt
from string import lower as str_lower
from xml.dom import minidom
from xml.dom import Node

#
# User methods
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError, exp:

    class GeneratedsSuper(object):
        def format_string(self, input_data, input_name=''):
            return input_data
        def format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def format_float(self, input_data, input_name=''):
            return '%f' % input_data
        def format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def format_boolean(self, input_data, input_name=''):
            return '%s' % input_data


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'utf-8'

#
# Support/utility functions.
#

def showIndent(outfile, level):
    for idx in range(level):
        outfile.write('    ')

def quote_xml(inStr):
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1

def quote_attrib(inStr):
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1

def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace):
        if self.category == MixedContainer.CategoryText:
            outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(outfile, level, namespace,name)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (self.name, self.value, self.name))
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write('model_.MixedContainer(%d, %d, "%s", "%s"),\n' % \
                (self.category, self.content_type, self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write('model_.MixedContainer(%d, %d, "%s", "%s"),\n' % \
                (self.category, self.content_type, self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write('model_.MixedContainer(%d, %d, "%s",\n' % \
                (self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0):
        self.name = name
        self.data_type = data_type
        self.container = container
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container

def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#

class inventory(GeneratedsSuper):
    member_data_items_ = [
        MemberSpec_('systems', 'systems_href', 0),
        MemberSpec_('log', 'log_href', 0),
        ]
    subclass = None
    superclass = None
    def __init__(self, systems=None, log=None):
        self.systems = systems
        self.log = log
    def factory(*args_, **kwargs_):
        if inventory.subclass:
            return inventory.subclass(*args_, **kwargs_)
        else:
            return inventory(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_systems(self): return self.systems
    def set_systems(self, systems): self.systems = systems
    def get_log(self): return self.log
    def set_log(self, log): self.log = log
    def export(self, outfile, level, namespace_='inv:', name_='inventory', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        self.exportAttributes(outfile, level, namespace_, name_='inventory')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, namespace_='inv:', name_='inventory'):
        pass
    def exportChildren(self, outfile, level, namespace_='inv:', name_='inventory'):
        if self.systems:
            self.systems.export(outfile, level, namespace_, name_='systems', )
        if self.log:
            self.log.export(outfile, level, namespace_, name_='log', )
    def hasContent_(self):
        if (
            self.systems is not None or
            self.log is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='inventory'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.systems is not None:
            showIndent(outfile, level)
            outfile.write('systems=model_.systems_href(\n')
            self.systems.exportLiteral(outfile, level, name_='systems')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.log is not None:
            showIndent(outfile, level)
            outfile.write('log=model_.log_href(\n')
            self.log.exportLiteral(outfile, level, name_='log')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'systems':
            obj_ = systems_href.factory()
            obj_.build(child_)
            self.set_systems(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'log':
            obj_ = log_href.factory()
            obj_.build(child_)
            self.set_log(obj_)
# end class inventory


class systems_href(GeneratedsSuper):
    member_data_items_ = [
        MemberSpec_('href', 'inv:string8092', 0),
        MemberSpec_('valueOf_', [], 0),
        ]
    subclass = None
    superclass = None
    def __init__(self, href=None, valueOf_=''):
        self.href = _cast(None, href)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if systems_href.subclass:
            return systems_href.subclass(*args_, **kwargs_)
        else:
            return systems_href(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_href(self): return self.href
    def set_href(self, href): self.href = href
    def getValueOf_(self): return self.valueOf_
    def setValueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def export(self, outfile, level, namespace_='inv:', name_='systems_href', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        self.exportAttributes(outfile, level, namespace_, name_='systems_href')
        if self.hasContent_():
            outfile.write('>')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, namespace_='inv:', name_='systems_href'):
        if self.href is not None:
            outfile.write(' href=%s' % (quote_attrib(self.href), ))
    def exportChildren(self, outfile, level, namespace_='inv:', name_='systems_href'):
        if self.valueOf_.find('![CDATA') > -1:
            value=quote_xml('%s' % self.valueOf_)
            value=value.replace('![CDATA','<![CDATA')
            value=value.replace(']]',']]>')
            outfile.write(value.encode(ExternalEncoding))
        else:
            outfile.write(quote_xml('%s' % self.valueOf_.encode(ExternalEncoding)))
    def hasContent_(self):
        if (
            self.valueOf_
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='systems_href'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        if self.href is not None:
            showIndent(outfile, level)
            outfile.write('href = %s,\n' % (self.href,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('valueOf_ = """%s""",\n' % (self.valueOf_,))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        self.valueOf_ = ''
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('href'):
            self.href = attrs.get('href').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.TEXT_NODE:
            self.valueOf_ += child_.nodeValue
        elif child_.nodeType == Node.CDATA_SECTION_NODE:
            self.valueOf_ += '![CDATA['+child_.nodeValue+']]'
# end class systems_href


class log_href(GeneratedsSuper):
    member_data_items_ = [
        MemberSpec_('href', 'inv:string8092', 0),
        MemberSpec_('valueOf_', [], 0),
        ]
    subclass = None
    superclass = None
    def __init__(self, href=None, valueOf_=''):
        self.href = _cast(None, href)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if log_href.subclass:
            return log_href.subclass(*args_, **kwargs_)
        else:
            return log_href(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_href(self): return self.href
    def set_href(self, href): self.href = href
    def getValueOf_(self): return self.valueOf_
    def setValueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def export(self, outfile, level, namespace_='inv:', name_='log_href', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        self.exportAttributes(outfile, level, namespace_, name_='log_href')
        if self.hasContent_():
            outfile.write('>')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, namespace_='inv:', name_='log_href'):
        if self.href is not None:
            outfile.write(' href=%s' % (quote_attrib(self.href), ))
    def exportChildren(self, outfile, level, namespace_='inv:', name_='log_href'):
        if self.valueOf_.find('![CDATA') > -1:
            value=quote_xml('%s' % self.valueOf_)
            value=value.replace('![CDATA','<![CDATA')
            value=value.replace(']]',']]>')
            outfile.write(value.encode(ExternalEncoding))
        else:
            outfile.write(quote_xml('%s' % self.valueOf_.encode(ExternalEncoding)))
    def hasContent_(self):
        if (
            self.valueOf_
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='log_href'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        if self.href is not None:
            showIndent(outfile, level)
            outfile.write('href = %s,\n' % (self.href,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('valueOf_ = """%s""",\n' % (self.valueOf_,))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        self.valueOf_ = ''
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('href'):
            self.href = attrs.get('href').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.TEXT_NODE:
            self.valueOf_ += child_.nodeValue
        elif child_.nodeType == Node.CDATA_SECTION_NODE:
            self.valueOf_ += '![CDATA['+child_.nodeValue+']]'
# end class log_href


class systems(GeneratedsSuper):
    member_data_items_ = [
        MemberSpec_('system', 'system', 1),
        ]
    subclass = None
    superclass = None
    def __init__(self, system=None):
        if system is None:
            self.system = []
        else:
            self.system = system
    def factory(*args_, **kwargs_):
        if systems.subclass:
            return systems.subclass(*args_, **kwargs_)
        else:
            return systems(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_system(self): return self.system
    def set_system(self, system): self.system = system
    def add_system(self, value): self.system.append(value)
    def insert_system(self, index, value): self.system[index] = value
    def export(self, outfile, level, namespace_='inv:', name_='systems', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        self.exportAttributes(outfile, level, namespace_, name_='systems')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, namespace_='inv:', name_='systems'):
        pass
    def exportChildren(self, outfile, level, namespace_='inv:', name_='systems'):
        for system_ in self.system:
            system_.export(outfile, level, namespace_, name_='system')
    def hasContent_(self):
        if (
            self.system
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='systems'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('system=[\n')
        level += 1
        for system_ in self.system:
            showIndent(outfile, level)
            outfile.write('model_.system(\n')
            system_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'system':
            obj_ = system.factory()
            obj_.build(child_)
            self.system.append(obj_)
# end class systems


class log(GeneratedsSuper):
    member_data_items_ = [
        MemberSpec_('valueOf_', [], 0),
        ]
    subclass = None
    superclass = None
    def __init__(self, valueOf_=''):
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if log.subclass:
            return log.subclass(*args_, **kwargs_)
        else:
            return log(*args_, **kwargs_)
    factory = staticmethod(factory)
    def getValueOf_(self): return self.valueOf_
    def setValueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def export(self, outfile, level, namespace_='inv:', name_='log', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        self.exportAttributes(outfile, level, namespace_, name_='log')
        if self.hasContent_():
            outfile.write('>')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, namespace_='inv:', name_='log'):
        pass
    def exportChildren(self, outfile, level, namespace_='inv:', name_='log'):
        if self.valueOf_.find('![CDATA') > -1:
            value=quote_xml('%s' % self.valueOf_)
            value=value.replace('![CDATA','<![CDATA')
            value=value.replace(']]',']]>')
            outfile.write(value.encode(ExternalEncoding))
        else:
            outfile.write(quote_xml('%s' % self.valueOf_.encode(ExternalEncoding)))
    def hasContent_(self):
        if (
            self.valueOf_
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='log'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('valueOf_ = """%s""",\n' % (self.valueOf_,))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        self.valueOf_ = ''
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.TEXT_NODE:
            self.valueOf_ += child_.nodeValue
        elif child_.nodeType == Node.CDATA_SECTION_NODE:
            self.valueOf_ += '![CDATA['+child_.nodeValue+']]'
# end class log


class system(GeneratedsSuper):
    member_data_items_ = [
        MemberSpec_('id', 'inv:string8092', 0),
        MemberSpec_('generatedUuid', ['string64', 'xsd:token'], 0),
        MemberSpec_('localUuid', ['string64', 'xsd:token'], 0),
        MemberSpec_('registrationDate', 'xsd:dateTime', 0),
        MemberSpec_('schedulediEventStartDate', 'xsd:dateTime', 0),
        MemberSpec_('launchDate', 'xsd:positiveInteger', 0),
        MemberSpec_('sslClientCertificate', ['string8092', 'xsd:token'], 0),
        MemberSpec_('sslClientKey', ['string8092', 'xsd:token'], 0),
        MemberSpec_('sslServerCertificate', ['string8092', 'xsd:token'], 0),
        MemberSpec_('launchingUser', ['string8092', 'xsd:token'], 0),
        MemberSpec_('targetType', ['string8092', 'xsd:token'], 0),
        MemberSpec_('targetName', ['string8092', 'xsd:token'], 0),
        MemberSpec_('targetSystemId', ['string8092', 'xsd:token'], 0),
        MemberSpec_('log', 'log_href', 0),
        MemberSpec_('description', ['string8092', 'xsd:token'], 0),
        MemberSpec_('name', ['string8092', 'xsd:token'], 0),
        MemberSpec_('hostname', ['string8092', 'xsd:token'], 0),
        MemberSpec_('currentState', 'current_state', 0),
        MemberSpec_('target', 'target', 0),
        MemberSpec_('targetSystemId', 'target', 0),
        MemberSpec_('targetSystemName', 'target', 0),
        MemberSpec_('targetSystemState', 'target', 0),
        MemberSpec_('targetSystemDescription', 'target', 0),
        MemberSpec_('systemLog', 'system_log_href', 0),
        MemberSpec_('agentPort', 'xsd:positiveInteger', 0),
        MemberSpec_('eventUuid', ['string64', 'xsd:token'], 0),
        MemberSpec_('networks', 'networks', 0),
        ]
    subclass = None
    superclass = None
    def __init__(self, id=None, generatedUuid=None, localUuid=None, registrationDate=None, schedulediEventStartDate=None, launchDate=None, sslClientCertificate=None, sslClientKey=None, sslServerCertificate=None, launchingUser=None, targetType=None, targetName=None, targetSystemId=None, log=None, description=None, name=None, hostname=None, currentState=None, target=None, targetSystemName=None, targetSystemState=None, targetSystemDescription=None, systemLog=None, agentPort=None, eventUuid=None, networks=None):
        self.id = _cast(None, id)
        self.generatedUuid = generatedUuid
        self.localUuid = localUuid
        self.registrationDate = registrationDate
        self.schedulediEventStartDate = schedulediEventStartDate
        self.launchDate = launchDate
        self.sslClientCertificate = sslClientCertificate
        self.sslClientKey = sslClientKey
        self.sslServerCertificate = sslServerCertificate
        self.launchingUser = launchingUser
        self.targetType = targetType
        self.targetName = targetName
        self.targetSystemId = targetSystemId
        self.log = log
        self.description = description
        self.name = name
        self.hostname = hostname
        self.currentState = currentState
        self.target = target
        self.targetSystemId = targetSystemId
        self.targetSystemName = targetSystemName
        self.targetSystemState = targetSystemState
        self.targetSystemDescription = targetSystemDescription
        self.systemLog = systemLog
        self.agentPort = agentPort
        self.eventUuid = eventUuid
        self.networks = networks
    def factory(*args_, **kwargs_):
        if system.subclass:
            return system.subclass(*args_, **kwargs_)
        else:
            return system(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_generatedUuid(self): return self.generatedUuid
    def set_generatedUuid(self, generatedUuid): self.generatedUuid = generatedUuid
    def validate_generatedUuid(self, value):
        # validate type generatedUuid
        pass
    def get_localUuid(self): return self.localUuid
    def set_localUuid(self, localUuid): self.localUuid = localUuid
    def validate_localUuid(self, value):
        # validate type localUuid
        pass
    def get_registrationDate(self): return self.registrationDate
    def set_registrationDate(self, registrationDate): self.registrationDate = registrationDate
    def get_schedulediEventStartDate(self): return self.schedulediEventStartDate
    def set_schedulediEventStartDate(self, schedulediEventStartDate): self.schedulediEventStartDate = schedulediEventStartDate
    def get_launchDate(self): return self.launchDate
    def set_launchDate(self, launchDate): self.launchDate = launchDate
    def get_sslClientCertificate(self): return self.sslClientCertificate
    def set_sslClientCertificate(self, sslClientCertificate): self.sslClientCertificate = sslClientCertificate
    def validate_sslClientCertificate(self, value):
        # validate type sslClientCertificate
        pass
    def get_sslClientKey(self): return self.sslClientKey
    def set_sslClientKey(self, sslClientKey): self.sslClientKey = sslClientKey
    def validate_sslClientKey(self, value):
        # validate type sslClientKey
        pass
    def get_sslServerCertificate(self): return self.sslServerCertificate
    def set_sslServerCertificate(self, sslServerCertificate): self.sslServerCertificate = sslServerCertificate
    def validate_sslServerCertificate(self, value):
        # validate type sslServerCertificate
        pass
    def get_launchingUser(self): return self.launchingUser
    def set_launchingUser(self, launchingUser): self.launchingUser = launchingUser
    def validate_launchingUser(self, value):
        # validate type launchingUser
        pass
    def get_targetType(self): return self.targetType
    def set_targetType(self, targetType): self.targetType = targetType
    def validate_targetType(self, value):
        # validate type targetType
        pass
    def get_targetName(self): return self.targetName
    def set_targetName(self, targetName): self.targetName = targetName
    def validate_targetName(self, value):
        # validate type targetName
        pass
    def get_targetSystemId(self): return self.targetSystemId
    def set_targetSystemId(self, targetSystemId): self.targetSystemId = targetSystemId
    def validate_targetSystemId(self, value):
        # validate type targetSystemId
        pass
    def get_log(self): return self.log
    def set_log(self, log): self.log = log
    def get_description(self): return self.description
    def set_description(self, description): self.description = description
    def validate_description(self, value):
        # validate type description
        pass
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def validate_name(self, value):
        # validate type name
        pass
    def get_hostname(self): return self.hostname
    def set_hostname(self, hostname): self.hostname = hostname
    def validate_hostname(self, value):
        # validate type hostname
        pass
    def get_currentState(self): return self.currentState
    def set_currentState(self, currentState): self.currentState = currentState
    def get_target(self): return self.target
    def set_target(self, target): self.target = target
    def get_targetSystemId(self): return self.targetSystemId
    def set_targetSystemId(self, targetSystemId): self.targetSystemId = targetSystemId
    def get_targetSystemName(self): return self.targetSystemName
    def set_targetSystemName(self, targetSystemName): self.targetSystemName = targetSystemName
    def get_targetSystemState(self): return self.targetSystemState
    def set_targetSystemState(self, targetSystemState): self.targetSystemState = targetSystemState
    def get_targetSystemDescription(self): return self.targetSystemDescription
    def set_targetSystemDescription(self, targetSystemDescription): self.targetSystemDescription = targetSystemDescription
    def get_systemLog(self): return self.systemLog
    def set_systemLog(self, systemLog): self.systemLog = systemLog
    def get_agentPort(self): return self.agentPort
    def set_agentPort(self, agentPort): self.agentPort = agentPort
    def get_eventUuid(self): return self.eventUuid
    def set_eventUuid(self, eventUuid): self.eventUuid = eventUuid
    def validate_eventUuid(self, value):
        # validate type eventUuid
        pass
    def get_networks(self): return self.networks
    def set_networks(self, networks): self.networks = networks
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def export(self, outfile, level, namespace_='inv:', name_='system', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        self.exportAttributes(outfile, level, namespace_, name_='system')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, namespace_='inv:', name_='system'):
        if self.id is not None:
            outfile.write(' id=%s' % (quote_attrib(self.id), ))
    def exportChildren(self, outfile, level, namespace_='inv:', name_='system'):
        if self.generatedUuid is not None:
            showIndent(outfile, level)
            outfile.write('<%sgeneratedUuid>%s</%sgeneratedUuid>\n' % (namespace_, self.format_string(quote_xml(self.generatedUuid).encode(ExternalEncoding), input_name='generatedUuid'), namespace_))
        if self.localUuid is not None:
            showIndent(outfile, level)
            outfile.write('<%slocalUuid>%s</%slocalUuid>\n' % (namespace_, self.format_string(quote_xml(self.localUuid).encode(ExternalEncoding), input_name='localUuid'), namespace_))
        if self.registrationDate is not None:
            showIndent(outfile, level)
            outfile.write('<%sregistrationDate>%s</%sregistrationDate>\n' % (namespace_, self.format_string(quote_xml(self.registrationDate).encode(ExternalEncoding), input_name='registrationDate'), namespace_))
        if self.schedulediEventStartDate is not None:
            showIndent(outfile, level)
            outfile.write('<%sschedulediEventStartDate>%s</%sschedulediEventStartDate>\n' % (namespace_, self.format_string(quote_xml(self.schedulediEventStartDate).encode(ExternalEncoding), input_name='schedulediEventStartDate'), namespace_))
        if self.launchDate is not None:
            showIndent(outfile, level)
            outfile.write('<%slaunchDate>%s</%slaunchDate>\n' % (namespace_, self.format_integer(self.launchDate, input_name='launchDate'), namespace_))
        if self.sslClientCertificate is not None:
            showIndent(outfile, level)
            outfile.write('<%ssslClientCertificate>%s</%ssslClientCertificate>\n' % (namespace_, self.format_string(quote_xml(self.sslClientCertificate).encode(ExternalEncoding), input_name='sslClientCertificate'), namespace_))
        if self.sslClientKey is not None:
            showIndent(outfile, level)
            outfile.write('<%ssslClientKey>%s</%ssslClientKey>\n' % (namespace_, self.format_string(quote_xml(self.sslClientKey).encode(ExternalEncoding), input_name='sslClientKey'), namespace_))
        if self.sslServerCertificate is not None:
            showIndent(outfile, level)
            outfile.write('<%ssslServerCertificate>%s</%ssslServerCertificate>\n' % (namespace_, self.format_string(quote_xml(self.sslServerCertificate).encode(ExternalEncoding), input_name='sslServerCertificate'), namespace_))
        if self.launchingUser is not None:
            showIndent(outfile, level)
            outfile.write('<%slaunchingUser>%s</%slaunchingUser>\n' % (namespace_, self.format_string(quote_xml(self.launchingUser).encode(ExternalEncoding), input_name='launchingUser'), namespace_))
        if self.targetType is not None:
            showIndent(outfile, level)
            outfile.write('<%stargetType>%s</%stargetType>\n' % (namespace_, self.format_string(quote_xml(self.targetType).encode(ExternalEncoding), input_name='targetType'), namespace_))
        if self.targetName is not None:
            showIndent(outfile, level)
            outfile.write('<%stargetName>%s</%stargetName>\n' % (namespace_, self.format_string(quote_xml(self.targetName).encode(ExternalEncoding), input_name='targetName'), namespace_))
        if self.targetSystemId is not None:
            showIndent(outfile, level)
            outfile.write('<%stargetSystemId>%s</%stargetSystemId>\n' % (namespace_, self.format_string(quote_xml(self.targetSystemId).encode(ExternalEncoding), input_name='targetSystemId'), namespace_))
        if self.log:
            self.log.export(outfile, level, namespace_, name_='log')
        if self.description is not None:
            showIndent(outfile, level)
            outfile.write('<%sdescription>%s</%sdescription>\n' % (namespace_, self.format_string(quote_xml(self.description).encode(ExternalEncoding), input_name='description'), namespace_))
        if self.name is not None:
            showIndent(outfile, level)
            outfile.write('<%sname>%s</%sname>\n' % (namespace_, self.format_string(quote_xml(self.name).encode(ExternalEncoding), input_name='name'), namespace_))
        if self.hostname is not None:
            showIndent(outfile, level)
            outfile.write('<%shostname>%s</%shostname>\n' % (namespace_, self.format_string(quote_xml(self.hostname).encode(ExternalEncoding), input_name='hostname'), namespace_))
        if self.currentState:
            self.currentState.export(outfile, level, namespace_, name_='currentState')
        if self.target:
            self.target.export(outfile, level, namespace_, name_='target')
        if self.targetSystemId:
            self.targetSystemId.export(outfile, level, namespace_, name_='targetSystemId')
        if self.targetSystemName:
            self.targetSystemName.export(outfile, level, namespace_, name_='targetSystemName')
        if self.targetSystemState:
            self.targetSystemState.export(outfile, level, namespace_, name_='targetSystemState')
        if self.targetSystemDescription:
            self.targetSystemDescription.export(outfile, level, namespace_, name_='targetSystemDescription')
        if self.systemLog:
            self.systemLog.export(outfile, level, namespace_, name_='systemLog')
        if self.agentPort is not None:
            showIndent(outfile, level)
            outfile.write('<%sagentPort>%s</%sagentPort>\n' % (namespace_, self.format_integer(self.agentPort, input_name='agentPort'), namespace_))
        if self.eventUuid is not None:
            showIndent(outfile, level)
            outfile.write('<%seventUuid>%s</%seventUuid>\n' % (namespace_, self.format_string(quote_xml(self.eventUuid).encode(ExternalEncoding), input_name='eventUuid'), namespace_))
        if self.networks:
            self.networks.export(outfile, level, namespace_, name_='networks', )
    def hasContent_(self):
        if (
            self.generatedUuid is not None or
            self.localUuid is not None or
            self.registrationDate is not None or
            self.schedulediEventStartDate is not None or
            self.launchDate is not None or
            self.sslClientCertificate is not None or
            self.sslClientKey is not None or
            self.sslServerCertificate is not None or
            self.launchingUser is not None or
            self.targetType is not None or
            self.targetName is not None or
            self.targetSystemId is not None or
            self.log is not None or
            self.description is not None or
            self.name is not None or
            self.hostname is not None or
            self.currentState is not None or
            self.target is not None or
            self.targetSystemId is not None or
            self.targetSystemName is not None or
            self.targetSystemState is not None or
            self.targetSystemDescription is not None or
            self.systemLog is not None or
            self.agentPort is not None or
            self.eventUuid is not None or
            self.networks is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='system'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        if self.id is not None:
            showIndent(outfile, level)
            outfile.write('id = %s,\n' % (self.id,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.generatedUuid is not None:
            showIndent(outfile, level)
            outfile.write('generatedUuid=%s,\n' % quote_python(self.generatedUuid).encode(ExternalEncoding))
        if self.localUuid is not None:
            showIndent(outfile, level)
            outfile.write('localUuid=%s,\n' % quote_python(self.localUuid).encode(ExternalEncoding))
        if self.registrationDate is not None:
            showIndent(outfile, level)
            outfile.write('registrationDate=%s,\n' % quote_python(self.registrationDate).encode(ExternalEncoding))
        if self.schedulediEventStartDate is not None:
            showIndent(outfile, level)
            outfile.write('schedulediEventStartDate=%s,\n' % quote_python(self.schedulediEventStartDate).encode(ExternalEncoding))
        if self.launchDate is not None:
            showIndent(outfile, level)
            outfile.write('launchDate=%d,\n' % self.launchDate)
        if self.sslClientCertificate is not None:
            showIndent(outfile, level)
            outfile.write('sslClientCertificate=%s,\n' % quote_python(self.sslClientCertificate).encode(ExternalEncoding))
        if self.sslClientKey is not None:
            showIndent(outfile, level)
            outfile.write('sslClientKey=%s,\n' % quote_python(self.sslClientKey).encode(ExternalEncoding))
        if self.sslServerCertificate is not None:
            showIndent(outfile, level)
            outfile.write('sslServerCertificate=%s,\n' % quote_python(self.sslServerCertificate).encode(ExternalEncoding))
        if self.launchingUser is not None:
            showIndent(outfile, level)
            outfile.write('launchingUser=%s,\n' % quote_python(self.launchingUser).encode(ExternalEncoding))
        if self.targetType is not None:
            showIndent(outfile, level)
            outfile.write('targetType=%s,\n' % quote_python(self.targetType).encode(ExternalEncoding))
        if self.targetName is not None:
            showIndent(outfile, level)
            outfile.write('targetName=%s,\n' % quote_python(self.targetName).encode(ExternalEncoding))
        if self.targetSystemId is not None:
            showIndent(outfile, level)
            outfile.write('targetSystemId=%s,\n' % quote_python(self.targetSystemId).encode(ExternalEncoding))
        if self.log is not None:
            showIndent(outfile, level)
            outfile.write('log=model_.log_href(\n')
            self.log.exportLiteral(outfile, level, name_='log')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.description is not None:
            showIndent(outfile, level)
            outfile.write('description=%s,\n' % quote_python(self.description).encode(ExternalEncoding))
        if self.name is not None:
            showIndent(outfile, level)
            outfile.write('name=%s,\n' % quote_python(self.name).encode(ExternalEncoding))
        if self.hostname is not None:
            showIndent(outfile, level)
            outfile.write('hostname=%s,\n' % quote_python(self.hostname).encode(ExternalEncoding))
        if self.currentState is not None:
            showIndent(outfile, level)
            outfile.write('currentState=model_.current_state(\n')
            self.currentState.exportLiteral(outfile, level, name_='currentState')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.target is not None:
            showIndent(outfile, level)
            outfile.write('target=model_.target(\n')
            self.target.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.targetSystemId is not None:
            showIndent(outfile, level)
            outfile.write('targetSystemId=model_.target(\n')
            self.targetSystemId.exportLiteral(outfile, level, name_='targetSystemId')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.targetSystemName is not None:
            showIndent(outfile, level)
            outfile.write('targetSystemName=model_.target(\n')
            self.targetSystemName.exportLiteral(outfile, level, name_='targetSystemName')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.targetSystemState is not None:
            showIndent(outfile, level)
            outfile.write('targetSystemState=model_.target(\n')
            self.targetSystemState.exportLiteral(outfile, level, name_='targetSystemState')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.targetSystemDescription is not None:
            showIndent(outfile, level)
            outfile.write('targetSystemDescription=model_.target(\n')
            self.targetSystemDescription.exportLiteral(outfile, level, name_='targetSystemDescription')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.systemLog is not None:
            showIndent(outfile, level)
            outfile.write('systemLog=model_.system_log_href(\n')
            self.systemLog.exportLiteral(outfile, level, name_='systemLog')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.agentPort is not None:
            showIndent(outfile, level)
            outfile.write('agentPort=%d,\n' % self.agentPort)
        if self.eventUuid is not None:
            showIndent(outfile, level)
            outfile.write('eventUuid=%s,\n' % quote_python(self.eventUuid).encode(ExternalEncoding))
        if self.networks is not None:
            showIndent(outfile, level)
            outfile.write('networks=model_.networks(\n')
            self.networks.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('id'):
            self.id = attrs.get('id').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'generatedUuid':
            generatedUuid_ = ''
            for text__content_ in child_.childNodes:
                generatedUuid_ += text__content_.nodeValue
            self.generatedUuid = generatedUuid_
            self.validate_generatedUuid(self.generatedUuid)    # validate type generatedUuid
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'localUuid':
            localUuid_ = ''
            for text__content_ in child_.childNodes:
                localUuid_ += text__content_.nodeValue
            self.localUuid = localUuid_
            self.validate_localUuid(self.localUuid)    # validate type localUuid
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'registrationDate':
            registrationDate_ = ''
            for text__content_ in child_.childNodes:
                registrationDate_ += text__content_.nodeValue
            self.registrationDate = registrationDate_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'schedulediEventStartDate':
            schedulediEventStartDate_ = ''
            for text__content_ in child_.childNodes:
                schedulediEventStartDate_ += text__content_.nodeValue
            self.schedulediEventStartDate = schedulediEventStartDate_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'launchDate':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    ival_ = int(sval_)
                except ValueError, exp:
                    raise ValueError('requires integer (launchDate): %s' % exp)
                if ival_ <= 0:
                    raise ValueError('requires positiveInteger -- %s' % child_.toxml())
                self.launchDate = ival_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'sslClientCertificate':
            sslClientCertificate_ = ''
            for text__content_ in child_.childNodes:
                sslClientCertificate_ += text__content_.nodeValue
            self.sslClientCertificate = sslClientCertificate_
            self.validate_sslClientCertificate(self.sslClientCertificate)    # validate type sslClientCertificate
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'sslClientKey':
            sslClientKey_ = ''
            for text__content_ in child_.childNodes:
                sslClientKey_ += text__content_.nodeValue
            self.sslClientKey = sslClientKey_
            self.validate_sslClientKey(self.sslClientKey)    # validate type sslClientKey
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'sslServerCertificate':
            sslServerCertificate_ = ''
            for text__content_ in child_.childNodes:
                sslServerCertificate_ += text__content_.nodeValue
            self.sslServerCertificate = sslServerCertificate_
            self.validate_sslServerCertificate(self.sslServerCertificate)    # validate type sslServerCertificate
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'launchingUser':
            launchingUser_ = ''
            for text__content_ in child_.childNodes:
                launchingUser_ += text__content_.nodeValue
            self.launchingUser = launchingUser_
            self.validate_launchingUser(self.launchingUser)    # validate type launchingUser
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'targetType':
            targetType_ = ''
            for text__content_ in child_.childNodes:
                targetType_ += text__content_.nodeValue
            self.targetType = targetType_
            self.validate_targetType(self.targetType)    # validate type targetType
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'targetName':
            targetName_ = ''
            for text__content_ in child_.childNodes:
                targetName_ += text__content_.nodeValue
            self.targetName = targetName_
            self.validate_targetName(self.targetName)    # validate type targetName
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'targetSystemId':
            targetSystemId_ = ''
            for text__content_ in child_.childNodes:
                targetSystemId_ += text__content_.nodeValue
            self.targetSystemId = targetSystemId_
            self.validate_targetSystemId(self.targetSystemId)    # validate type targetSystemId
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'log':
            obj_ = log_href.factory()
            obj_.build(child_)
            self.set_log(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'description':
            description_ = ''
            for text__content_ in child_.childNodes:
                description_ += text__content_.nodeValue
            self.description = description_
            self.validate_description(self.description)    # validate type description
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'name':
            name_ = ''
            for text__content_ in child_.childNodes:
                name_ += text__content_.nodeValue
            self.name = name_
            self.validate_name(self.name)    # validate type name
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'hostname':
            hostname_ = ''
            for text__content_ in child_.childNodes:
                hostname_ += text__content_.nodeValue
            self.hostname = hostname_
            self.validate_hostname(self.hostname)    # validate type hostname
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'currentState':
            obj_ = current_state.factory()
            obj_.build(child_)
            self.set_currentState(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'target':
            obj_ = target.factory()
            obj_.build(child_)
            self.set_target(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'targetSystemId':
            obj_ = target.factory()
            obj_.build(child_)
            self.set_targetSystemId(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'targetSystemName':
            obj_ = target.factory()
            obj_.build(child_)
            self.set_targetSystemName(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'targetSystemState':
            obj_ = target.factory()
            obj_.build(child_)
            self.set_targetSystemState(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'targetSystemDescription':
            obj_ = target.factory()
            obj_.build(child_)
            self.set_targetSystemDescription(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'systemLog':
            obj_ = system_log_href.factory()
            obj_.build(child_)
            self.set_systemLog(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'agentPort':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    ival_ = int(sval_)
                except ValueError, exp:
                    raise ValueError('requires integer (agentPort): %s' % exp)
                if ival_ <= 0:
                    raise ValueError('requires positiveInteger -- %s' % child_.toxml())
                self.agentPort = ival_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'eventUuid':
            eventUuid_ = ''
            for text__content_ in child_.childNodes:
                eventUuid_ += text__content_.nodeValue
            self.eventUuid = eventUuid_
            self.validate_eventUuid(self.eventUuid)    # validate type eventUuid
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'networks':
            obj_ = networks.factory()
            obj_.build(child_)
            self.set_networks(obj_)
# end class system


class networks(GeneratedsSuper):
    member_data_items_ = [
        MemberSpec_('network', 'network', 1),
        ]
    subclass = None
    superclass = None
    def __init__(self, network=None):
        if network is None:
            self.network = []
        else:
            self.network = network
    def factory(*args_, **kwargs_):
        if networks.subclass:
            return networks.subclass(*args_, **kwargs_)
        else:
            return networks(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_network(self): return self.network
    def set_network(self, network): self.network = network
    def add_network(self, value): self.network.append(value)
    def insert_network(self, index, value): self.network[index] = value
    def export(self, outfile, level, namespace_='inv:', name_='networks', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        self.exportAttributes(outfile, level, namespace_, name_='networks')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, namespace_='inv:', name_='networks'):
        pass
    def exportChildren(self, outfile, level, namespace_='inv:', name_='networks'):
        for network_ in self.network:
            network_.export(outfile, level, namespace_, name_='network')
    def hasContent_(self):
        if (
            self.network
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='networks'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('network=[\n')
        level += 1
        for network_ in self.network:
            showIndent(outfile, level)
            outfile.write('model_.network(\n')
            network_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'network':
            obj_ = network.factory()
            obj_.build(child_)
            self.network.append(obj_)
# end class networks


class network(GeneratedsSuper):
    member_data_items_ = [
        MemberSpec_('ipAddress', ['string15', 'xsd:token'], 0),
        MemberSpec_('ipv6Address', ['string255', 'xsd:token'], 0),
        MemberSpec_('dnsName', ['string255', 'xsd:token'], 0),
        MemberSpec_('deviceName', ['string8092', 'xsd:token'], 0),
        MemberSpec_('netmask', ['string8092', 'xsd:token'], 0),
        MemberSpec_('portType', ['string8092', 'xsd:token'], 0),
        MemberSpec_('active', 'xsd:boolean', 0),
        MemberSpec_('required', 'xsd:boolean', 0),
        ]
    subclass = None
    superclass = None
    def __init__(self, ipAddress=None, ipv6Address=None, dnsName=None, deviceName=None, netmask=None, portType=None, active=None, required=None):
        self.ipAddress = ipAddress
        self.ipv6Address = ipv6Address
        self.dnsName = dnsName
        self.deviceName = deviceName
        self.netmask = netmask
        self.portType = portType
        self.active = active
        self.required = required
    def factory(*args_, **kwargs_):
        if network.subclass:
            return network.subclass(*args_, **kwargs_)
        else:
            return network(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ipAddress(self): return self.ipAddress
    def set_ipAddress(self, ipAddress): self.ipAddress = ipAddress
    def validate_ipAddress(self, value):
        # validate type ipAddress
        pass
    def get_ipv6Address(self): return self.ipv6Address
    def set_ipv6Address(self, ipv6Address): self.ipv6Address = ipv6Address
    def validate_ipv6Address(self, value):
        # validate type ipv6Address
        pass
    def get_dnsName(self): return self.dnsName
    def set_dnsName(self, dnsName): self.dnsName = dnsName
    def validate_dnsName(self, value):
        # validate type dnsName
        pass
    def get_deviceName(self): return self.deviceName
    def set_deviceName(self, deviceName): self.deviceName = deviceName
    def validate_deviceName(self, value):
        # validate type deviceName
        pass
    def get_netmask(self): return self.netmask
    def set_netmask(self, netmask): self.netmask = netmask
    def validate_netmask(self, value):
        # validate type netmask
        pass
    def get_portType(self): return self.portType
    def set_portType(self, portType): self.portType = portType
    def validate_portType(self, value):
        # validate type portType
        pass
    def get_active(self): return self.active
    def set_active(self, active): self.active = active
    def get_required(self): return self.required
    def set_required(self, required): self.required = required
    def export(self, outfile, level, namespace_='inv:', name_='network', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        self.exportAttributes(outfile, level, namespace_, name_='network')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, namespace_='inv:', name_='network'):
        pass
    def exportChildren(self, outfile, level, namespace_='inv:', name_='network'):
        if self.ipAddress is not None:
            showIndent(outfile, level)
            outfile.write('<%sipAddress>%s</%sipAddress>\n' % (namespace_, self.format_string(quote_xml(self.ipAddress).encode(ExternalEncoding), input_name='ipAddress'), namespace_))
        if self.ipv6Address is not None:
            showIndent(outfile, level)
            outfile.write('<%sipv6Address>%s</%sipv6Address>\n' % (namespace_, self.format_string(quote_xml(self.ipv6Address).encode(ExternalEncoding), input_name='ipv6Address'), namespace_))
        if self.dnsName is not None:
            showIndent(outfile, level)
            outfile.write('<%sdnsName>%s</%sdnsName>\n' % (namespace_, self.format_string(quote_xml(self.dnsName).encode(ExternalEncoding), input_name='dnsName'), namespace_))
        if self.deviceName is not None:
            showIndent(outfile, level)
            outfile.write('<%sdeviceName>%s</%sdeviceName>\n' % (namespace_, self.format_string(quote_xml(self.deviceName).encode(ExternalEncoding), input_name='deviceName'), namespace_))
        if self.netmask is not None:
            showIndent(outfile, level)
            outfile.write('<%snetmask>%s</%snetmask>\n' % (namespace_, self.format_string(quote_xml(self.netmask).encode(ExternalEncoding), input_name='netmask'), namespace_))
        if self.portType is not None:
            showIndent(outfile, level)
            outfile.write('<%sportType>%s</%sportType>\n' % (namespace_, self.format_string(quote_xml(self.portType).encode(ExternalEncoding), input_name='portType'), namespace_))
        if self.active is not None:
            showIndent(outfile, level)
            outfile.write('<%sactive>%s</%sactive>\n' % (namespace_, self.format_boolean(str_lower(str(self.active)), input_name='active'), namespace_))
        if self.required is not None:
            showIndent(outfile, level)
            outfile.write('<%srequired>%s</%srequired>\n' % (namespace_, self.format_boolean(str_lower(str(self.required)), input_name='required'), namespace_))
    def hasContent_(self):
        if (
            self.ipAddress is not None or
            self.ipv6Address is not None or
            self.dnsName is not None or
            self.deviceName is not None or
            self.netmask is not None or
            self.portType is not None or
            self.active is not None or
            self.required is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='network'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.ipAddress is not None:
            showIndent(outfile, level)
            outfile.write('ipAddress=%s,\n' % quote_python(self.ipAddress).encode(ExternalEncoding))
        if self.ipv6Address is not None:
            showIndent(outfile, level)
            outfile.write('ipv6Address=%s,\n' % quote_python(self.ipv6Address).encode(ExternalEncoding))
        if self.dnsName is not None:
            showIndent(outfile, level)
            outfile.write('dnsName=%s,\n' % quote_python(self.dnsName).encode(ExternalEncoding))
        if self.deviceName is not None:
            showIndent(outfile, level)
            outfile.write('deviceName=%s,\n' % quote_python(self.deviceName).encode(ExternalEncoding))
        if self.netmask is not None:
            showIndent(outfile, level)
            outfile.write('netmask=%s,\n' % quote_python(self.netmask).encode(ExternalEncoding))
        if self.portType is not None:
            showIndent(outfile, level)
            outfile.write('portType=%s,\n' % quote_python(self.portType).encode(ExternalEncoding))
        if self.active is not None:
            showIndent(outfile, level)
            outfile.write('active=%s,\n' % self.active)
        if self.required is not None:
            showIndent(outfile, level)
            outfile.write('required=%s,\n' % self.required)
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'ipAddress':
            ipAddress_ = ''
            for text__content_ in child_.childNodes:
                ipAddress_ += text__content_.nodeValue
            self.ipAddress = ipAddress_
            self.validate_ipAddress(self.ipAddress)    # validate type ipAddress
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'ipv6Address':
            ipv6Address_ = ''
            for text__content_ in child_.childNodes:
                ipv6Address_ += text__content_.nodeValue
            self.ipv6Address = ipv6Address_
            self.validate_ipv6Address(self.ipv6Address)    # validate type ipv6Address
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'dnsName':
            dnsName_ = ''
            for text__content_ in child_.childNodes:
                dnsName_ += text__content_.nodeValue
            self.dnsName = dnsName_
            self.validate_dnsName(self.dnsName)    # validate type dnsName
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'deviceName':
            deviceName_ = ''
            for text__content_ in child_.childNodes:
                deviceName_ += text__content_.nodeValue
            self.deviceName = deviceName_
            self.validate_deviceName(self.deviceName)    # validate type deviceName
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'netmask':
            netmask_ = ''
            for text__content_ in child_.childNodes:
                netmask_ += text__content_.nodeValue
            self.netmask = netmask_
            self.validate_netmask(self.netmask)    # validate type netmask
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'portType':
            portType_ = ''
            for text__content_ in child_.childNodes:
                portType_ += text__content_.nodeValue
            self.portType = portType_
            self.validate_portType(self.portType)    # validate type portType
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'active':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                if sval_ in ('true', '1'):
                    ival_ = True
                elif sval_ in ('false', '0'):
                    ival_ = False
                else:
                    raise ValueError('requires boolean -- %s' % child_.toxml())
                self.active = ival_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'required':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                if sval_ in ('true', '1'):
                    ival_ = True
                elif sval_ in ('false', '0'):
                    ival_ = False
                else:
                    raise ValueError('requires boolean -- %s' % child_.toxml())
                self.required = ival_
# end class network


class system_log_href(GeneratedsSuper):
    member_data_items_ = [
        MemberSpec_('href', 'inv:string8092', 0),
        MemberSpec_('valueOf_', [], 0),
        ]
    subclass = None
    superclass = None
    def __init__(self, href=None, valueOf_=''):
        self.href = _cast(None, href)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if system_log_href.subclass:
            return system_log_href.subclass(*args_, **kwargs_)
        else:
            return system_log_href(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_href(self): return self.href
    def set_href(self, href): self.href = href
    def getValueOf_(self): return self.valueOf_
    def setValueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def export(self, outfile, level, namespace_='inv:', name_='system_log_href', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        self.exportAttributes(outfile, level, namespace_, name_='system_log_href')
        if self.hasContent_():
            outfile.write('>')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, namespace_='inv:', name_='system_log_href'):
        if self.href is not None:
            outfile.write(' href=%s' % (quote_attrib(self.href), ))
    def exportChildren(self, outfile, level, namespace_='inv:', name_='system_log_href'):
        if self.valueOf_.find('![CDATA') > -1:
            value=quote_xml('%s' % self.valueOf_)
            value=value.replace('![CDATA','<![CDATA')
            value=value.replace(']]',']]>')
            outfile.write(value.encode(ExternalEncoding))
        else:
            outfile.write(quote_xml('%s' % self.valueOf_.encode(ExternalEncoding)))
    def hasContent_(self):
        if (
            self.valueOf_
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='system_log_href'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        if self.href is not None:
            showIndent(outfile, level)
            outfile.write('href = %s,\n' % (self.href,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('valueOf_ = """%s""",\n' % (self.valueOf_,))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        self.valueOf_ = ''
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('href'):
            self.href = attrs.get('href').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.TEXT_NODE:
            self.valueOf_ += child_.nodeValue
        elif child_.nodeType == Node.CDATA_SECTION_NODE:
            self.valueOf_ += '![CDATA['+child_.nodeValue+']]'
# end class system_log_href


class current_state(GeneratedsSuper):
    member_data_items_ = [
        MemberSpec_('name', ['string8092', 'xsd:token'], 0),
        ]
    subclass = None
    superclass = None
    def __init__(self, name=None):
        self.name = name
    def factory(*args_, **kwargs_):
        if current_state.subclass:
            return current_state.subclass(*args_, **kwargs_)
        else:
            return current_state(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def validate_name(self, value):
        # validate type name
        pass
    def export(self, outfile, level, namespace_='inv:', name_='current_state', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        self.exportAttributes(outfile, level, namespace_, name_='current_state')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, namespace_='inv:', name_='current_state'):
        pass
    def exportChildren(self, outfile, level, namespace_='inv:', name_='current_state'):
        if self.name is not None:
            showIndent(outfile, level)
            outfile.write('<%sname>%s</%sname>\n' % (namespace_, self.format_string(quote_xml(self.name).encode(ExternalEncoding), input_name='name'), namespace_))
    def hasContent_(self):
        if (
            self.name is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='current_state'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.name is not None:
            showIndent(outfile, level)
            outfile.write('name=%s,\n' % quote_python(self.name).encode(ExternalEncoding))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'name':
            name_ = ''
            for text__content_ in child_.childNodes:
                name_ += text__content_.nodeValue
            self.name = name_
            self.validate_name(self.name)    # validate type name
# end class current_state


class target(GeneratedsSuper):
    member_data_items_ = [
        MemberSpec_('id', 'inv:string8092', 0),
        MemberSpec_('cloudAlias', ['string8092', 'xsd:token'], 0),
        MemberSpec_('cloudName', ['string8092', 'xsd:token'], 0),
        MemberSpec_('type_', 'type', 0),
        ]
    subclass = None
    superclass = None
    def __init__(self, id=None, cloudAlias=None, cloudName=None, type_=None):
        self.id = _cast(None, id)
        self.cloudAlias = cloudAlias
        self.cloudName = cloudName
        self.type_ = type_
    def factory(*args_, **kwargs_):
        if target.subclass:
            return target.subclass(*args_, **kwargs_)
        else:
            return target(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_cloudAlias(self): return self.cloudAlias
    def set_cloudAlias(self, cloudAlias): self.cloudAlias = cloudAlias
    def validate_cloudAlias(self, value):
        # validate type cloudAlias
        pass
    def get_cloudName(self): return self.cloudName
    def set_cloudName(self, cloudName): self.cloudName = cloudName
    def validate_cloudName(self, value):
        # validate type cloudName
        pass
    def get_type(self): return self.type_
    def set_type(self, type_): self.type_ = type_
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def export(self, outfile, level, namespace_='inv:', name_='target', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        self.exportAttributes(outfile, level, namespace_, name_='target')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, namespace_='inv:', name_='target'):
        if self.id is not None:
            outfile.write(' id=%s' % (quote_attrib(self.id), ))
    def exportChildren(self, outfile, level, namespace_='inv:', name_='target'):
        if self.cloudAlias is not None:
            showIndent(outfile, level)
            outfile.write('<%scloudAlias>%s</%scloudAlias>\n' % (namespace_, self.format_string(quote_xml(self.cloudAlias).encode(ExternalEncoding), input_name='cloudAlias'), namespace_))
        if self.cloudName is not None:
            showIndent(outfile, level)
            outfile.write('<%scloudName>%s</%scloudName>\n' % (namespace_, self.format_string(quote_xml(self.cloudName).encode(ExternalEncoding), input_name='cloudName'), namespace_))
        if self.type_:
            self.type_.export(outfile, level, namespace_, name_='type', )
    def hasContent_(self):
        if (
            self.cloudAlias is not None or
            self.cloudName is not None or
            self.type_ is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='target'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        if self.id is not None:
            showIndent(outfile, level)
            outfile.write('id = %s,\n' % (self.id,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.cloudAlias is not None:
            showIndent(outfile, level)
            outfile.write('cloudAlias=%s,\n' % quote_python(self.cloudAlias).encode(ExternalEncoding))
        if self.cloudName is not None:
            showIndent(outfile, level)
            outfile.write('cloudName=%s,\n' % quote_python(self.cloudName).encode(ExternalEncoding))
        if self.type_ is not None:
            showIndent(outfile, level)
            outfile.write('type_=model_.type_(\n')
            self.type_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('id'):
            self.id = attrs.get('id').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'cloudAlias':
            cloudAlias_ = ''
            for text__content_ in child_.childNodes:
                cloudAlias_ += text__content_.nodeValue
            self.cloudAlias = cloudAlias_
            self.validate_cloudAlias(self.cloudAlias)    # validate type cloudAlias
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'cloudName':
            cloudName_ = ''
            for text__content_ in child_.childNodes:
                cloudName_ += text__content_.nodeValue
            self.cloudName = cloudName_
            self.validate_cloudName(self.cloudName)    # validate type cloudName
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'type':
            obj_ = type_.factory()
            obj_.build(child_)
            self.set_type(obj_)
# end class target


class type_(GeneratedsSuper):
    member_data_items_ = [
        MemberSpec_('href', 'inv:string8092', 0),
        MemberSpec_('valueOf_', [], 0),
        ]
    subclass = None
    superclass = None
    def __init__(self, href=None, valueOf_=''):
        self.href = _cast(None, href)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if type_.subclass:
            return type_.subclass(*args_, **kwargs_)
        else:
            return type_(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_href(self): return self.href
    def set_href(self, href): self.href = href
    def getValueOf_(self): return self.valueOf_
    def setValueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def export(self, outfile, level, namespace_='inv:', name_='type', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        self.exportAttributes(outfile, level, namespace_, name_='type')
        if self.hasContent_():
            outfile.write('>')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, namespace_='inv:', name_='type'):
        if self.href is not None:
            outfile.write(' href=%s' % (quote_attrib(self.href), ))
    def exportChildren(self, outfile, level, namespace_='inv:', name_='type'):
        if self.valueOf_.find('![CDATA') > -1:
            value=quote_xml('%s' % self.valueOf_)
            value=value.replace('![CDATA','<![CDATA')
            value=value.replace(']]',']]>')
            outfile.write(value.encode(ExternalEncoding))
        else:
            outfile.write(quote_xml('%s' % self.valueOf_.encode(ExternalEncoding)))
    def hasContent_(self):
        if (
            self.valueOf_
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='type'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        if self.href is not None:
            showIndent(outfile, level)
            outfile.write('href = %s,\n' % (self.href,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('valueOf_ = """%s""",\n' % (self.valueOf_,))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        self.valueOf_ = ''
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('href'):
            self.href = attrs.get('href').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.TEXT_NODE:
            self.valueOf_ += child_.nodeValue
        elif child_.nodeType == Node.CDATA_SECTION_NODE:
            self.valueOf_ += '![CDATA['+child_.nodeValue+']]'
# end class type_


class system_log_entry(GeneratedsSuper):
    member_data_items_ = [
        MemberSpec_('entry', ['string8092', 'xsd:token'], 0),
        MemberSpec_('entry_date', 'xsd:positiveInteger', 0),
        ]
    subclass = None
    superclass = None
    def __init__(self, entry=None, entry_date=None):
        self.entry = entry
        self.entry_date = entry_date
    def factory(*args_, **kwargs_):
        if system_log_entry.subclass:
            return system_log_entry.subclass(*args_, **kwargs_)
        else:
            return system_log_entry(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_entry(self): return self.entry
    def set_entry(self, entry): self.entry = entry
    def validate_entry(self, value):
        # validate type entry
        pass
    def get_entry_date(self): return self.entry_date
    def set_entry_date(self, entry_date): self.entry_date = entry_date
    def export(self, outfile, level, namespace_='inv:', name_='system_log_entry', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        self.exportAttributes(outfile, level, namespace_, name_='system_log_entry')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, namespace_='inv:', name_='system_log_entry'):
        pass
    def exportChildren(self, outfile, level, namespace_='inv:', name_='system_log_entry'):
        if self.entry is not None:
            showIndent(outfile, level)
            outfile.write('<%sentry>%s</%sentry>\n' % (namespace_, self.format_string(quote_xml(self.entry).encode(ExternalEncoding), input_name='entry'), namespace_))
        if self.entry_date is not None:
            showIndent(outfile, level)
            outfile.write('<%sentry_date>%s</%sentry_date>\n' % (namespace_, self.format_integer(self.entry_date, input_name='entry_date'), namespace_))
    def hasContent_(self):
        if (
            self.entry is not None or
            self.entry_date is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='system_log_entry'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.entry is not None:
            showIndent(outfile, level)
            outfile.write('entry=%s,\n' % quote_python(self.entry).encode(ExternalEncoding))
        if self.entry_date is not None:
            showIndent(outfile, level)
            outfile.write('entry_date=%d,\n' % self.entry_date)
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'entry':
            entry_ = ''
            for text__content_ in child_.childNodes:
                entry_ += text__content_.nodeValue
            self.entry = entry_
            self.validate_entry(self.entry)    # validate type entry
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'entry_date':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    ival_ = int(sval_)
                except ValueError, exp:
                    raise ValueError('requires integer (entry_date): %s' % exp)
                if ival_ <= 0:
                    raise ValueError('requires positiveInteger -- %s' % child_.toxml())
                self.entry_date = ival_
# end class system_log_entry


class system_log(GeneratedsSuper):
    member_data_items_ = [
        MemberSpec_('system_log_entry', 'system_log_entry', 1),
        ]
    subclass = None
    superclass = None
    def __init__(self, system_log_entry=None):
        if system_log_entry is None:
            self.system_log_entry = []
        else:
            self.system_log_entry = system_log_entry
    def factory(*args_, **kwargs_):
        if system_log.subclass:
            return system_log.subclass(*args_, **kwargs_)
        else:
            return system_log(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_system_log_entry(self): return self.system_log_entry
    def set_system_log_entry(self, system_log_entry): self.system_log_entry = system_log_entry
    def add_system_log_entry(self, value): self.system_log_entry.append(value)
    def insert_system_log_entry(self, index, value): self.system_log_entry[index] = value
    def export(self, outfile, level, namespace_='inv:', name_='system_log', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        self.exportAttributes(outfile, level, namespace_, name_='system_log')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, namespace_='inv:', name_='system_log'):
        pass
    def exportChildren(self, outfile, level, namespace_='inv:', name_='system_log'):
        for system_log_entry_ in self.system_log_entry:
            system_log_entry_.export(outfile, level, namespace_, name_='system_log_entry')
    def hasContent_(self):
        if (
            self.system_log_entry
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='system_log'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('system_log_entry=[\n')
        level += 1
        for system_log_entry_ in self.system_log_entry:
            showIndent(outfile, level)
            outfile.write('model_.system_log_entry(\n')
            system_log_entry_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'system_log_entry':
            obj_ = system_log_entry.factory()
            obj_.build(child_)
            self.system_log_entry.append(obj_)
# end class system_log


class systemInformationType(GeneratedsSuper):
    member_data_items_ = [
        MemberSpec_('systemName', ['string64', 'xsd:token'], 0),
        MemberSpec_('memory', 'xsd:positiveInteger', 0),
        MemberSpec_('osType', ['string64', 'xsd:token'], 0),
        MemberSpec_('osMajorVersion', ['string64', 'xsd:token'], 0),
        MemberSpec_('osMinorVersion', ['string32', 'xsd:token'], 0),
        MemberSpec_('systemType', ['string32', 'xsd:token'], 0),
        ]
    subclass = None
    superclass = None
    def __init__(self, systemName=None, memory=None, osType=None, osMajorVersion=None, osMinorVersion=None, systemType=None):
        self.systemName = systemName
        self.memory = memory
        self.osType = osType
        self.osMajorVersion = osMajorVersion
        self.osMinorVersion = osMinorVersion
        self.systemType = systemType
    def factory(*args_, **kwargs_):
        if systemInformationType.subclass:
            return systemInformationType.subclass(*args_, **kwargs_)
        else:
            return systemInformationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_systemName(self): return self.systemName
    def set_systemName(self, systemName): self.systemName = systemName
    def validate_systemName(self, value):
        # validate type systemName
        pass
    def get_memory(self): return self.memory
    def set_memory(self, memory): self.memory = memory
    def get_osType(self): return self.osType
    def set_osType(self, osType): self.osType = osType
    def validate_osType(self, value):
        # validate type osType
        pass
    def get_osMajorVersion(self): return self.osMajorVersion
    def set_osMajorVersion(self, osMajorVersion): self.osMajorVersion = osMajorVersion
    def validate_osMajorVersion(self, value):
        # validate type osMajorVersion
        pass
    def get_osMinorVersion(self): return self.osMinorVersion
    def set_osMinorVersion(self, osMinorVersion): self.osMinorVersion = osMinorVersion
    def validate_osMinorVersion(self, value):
        # validate type osMinorVersion
        pass
    def get_systemType(self): return self.systemType
    def set_systemType(self, systemType): self.systemType = systemType
    def validate_systemType(self, value):
        # validate type systemType
        pass
    def export(self, outfile, level, namespace_='inv:', name_='systemInformationType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        self.exportAttributes(outfile, level, namespace_, name_='systemInformationType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, namespace_='inv:', name_='systemInformationType'):
        pass
    def exportChildren(self, outfile, level, namespace_='inv:', name_='systemInformationType'):
        if self.systemName is not None:
            showIndent(outfile, level)
            outfile.write('<%ssystemName>%s</%ssystemName>\n' % (namespace_, self.format_string(quote_xml(self.systemName).encode(ExternalEncoding), input_name='systemName'), namespace_))
        if self.memory is not None:
            showIndent(outfile, level)
            outfile.write('<%smemory>%s</%smemory>\n' % (namespace_, self.format_integer(self.memory, input_name='memory'), namespace_))
        if self.osType is not None:
            showIndent(outfile, level)
            outfile.write('<%sosType>%s</%sosType>\n' % (namespace_, self.format_string(quote_xml(self.osType).encode(ExternalEncoding), input_name='osType'), namespace_))
        if self.osMajorVersion is not None:
            showIndent(outfile, level)
            outfile.write('<%sosMajorVersion>%s</%sosMajorVersion>\n' % (namespace_, self.format_string(quote_xml(self.osMajorVersion).encode(ExternalEncoding), input_name='osMajorVersion'), namespace_))
        if self.osMinorVersion is not None:
            showIndent(outfile, level)
            outfile.write('<%sosMinorVersion>%s</%sosMinorVersion>\n' % (namespace_, self.format_string(quote_xml(self.osMinorVersion).encode(ExternalEncoding), input_name='osMinorVersion'), namespace_))
        if self.systemType is not None:
            showIndent(outfile, level)
            outfile.write('<%ssystemType>%s</%ssystemType>\n' % (namespace_, self.format_string(quote_xml(self.systemType).encode(ExternalEncoding), input_name='systemType'), namespace_))
    def hasContent_(self):
        if (
            self.systemName is not None or
            self.memory is not None or
            self.osType is not None or
            self.osMajorVersion is not None or
            self.osMinorVersion is not None or
            self.systemType is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='systemInformationType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.systemName is not None:
            showIndent(outfile, level)
            outfile.write('systemName=%s,\n' % quote_python(self.systemName).encode(ExternalEncoding))
        if self.memory is not None:
            showIndent(outfile, level)
            outfile.write('memory=%d,\n' % self.memory)
        if self.osType is not None:
            showIndent(outfile, level)
            outfile.write('osType=%s,\n' % quote_python(self.osType).encode(ExternalEncoding))
        if self.osMajorVersion is not None:
            showIndent(outfile, level)
            outfile.write('osMajorVersion=%s,\n' % quote_python(self.osMajorVersion).encode(ExternalEncoding))
        if self.osMinorVersion is not None:
            showIndent(outfile, level)
            outfile.write('osMinorVersion=%s,\n' % quote_python(self.osMinorVersion).encode(ExternalEncoding))
        if self.systemType is not None:
            showIndent(outfile, level)
            outfile.write('systemType=%s,\n' % quote_python(self.systemType).encode(ExternalEncoding))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'systemName':
            systemName_ = ''
            for text__content_ in child_.childNodes:
                systemName_ += text__content_.nodeValue
            self.systemName = systemName_
            self.validate_systemName(self.systemName)    # validate type systemName
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'memory':
            if child_.firstChild:
                sval_ = child_.firstChild.nodeValue
                try:
                    ival_ = int(sval_)
                except ValueError, exp:
                    raise ValueError('requires integer (memory): %s' % exp)
                if ival_ <= 0:
                    raise ValueError('requires positiveInteger -- %s' % child_.toxml())
                self.memory = ival_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'osType':
            osType_ = ''
            for text__content_ in child_.childNodes:
                osType_ += text__content_.nodeValue
            self.osType = osType_
            self.validate_osType(self.osType)    # validate type osType
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'osMajorVersion':
            osMajorVersion_ = ''
            for text__content_ in child_.childNodes:
                osMajorVersion_ += text__content_.nodeValue
            self.osMajorVersion = osMajorVersion_
            self.validate_osMajorVersion(self.osMajorVersion)    # validate type osMajorVersion
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'osMinorVersion':
            osMinorVersion_ = ''
            for text__content_ in child_.childNodes:
                osMinorVersion_ += text__content_.nodeValue
            self.osMinorVersion = osMinorVersion_
            self.validate_osMinorVersion(self.osMinorVersion)    # validate type osMinorVersion
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'systemType':
            systemType_ = ''
            for text__content_ in child_.childNodes:
                systemType_ += text__content_.nodeValue
            self.systemType = systemType_
            self.validate_systemType(self.systemType)    # validate type systemType
# end class systemInformationType


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""

def usage():
    print USAGE_TEXT
    sys.exit(1)


def parse(inFileName):
    doc = minidom.parse(inFileName)
    rootNode = doc.documentElement
    rootObj = inventory.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
##     sys.stdout.write('<?xml version="1.0" ?>\n')
##     rootObj.export(sys.stdout, 0, name_="inventory", 
##         namespacedef_='')
    return rootObj


def parseString(inString):
    doc = minidom.parseString(inString)
    rootNode = doc.documentElement
    rootObj = inventory.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
##     sys.stdout.write('<?xml version="1.0" ?>\n')
##     rootObj.export(sys.stdout, 0, name_="inventory",
##         namespacedef_='')
    return rootObj


def parseLiteral(inFileName):
    doc = minidom.parse(inFileName)
    rootNode = doc.documentElement
    rootObj = inventory.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
##     sys.stdout.write('#from generateds_system_1_0 import *\n\n')
##     sys.stdout.write('import generateds_system_1_0 as model_\n\n')
##     sys.stdout.write('rootObj = model_.inventory(\n')
##     rootObj.exportLiteral(sys.stdout, 0, name_="inventory")
##     sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()

